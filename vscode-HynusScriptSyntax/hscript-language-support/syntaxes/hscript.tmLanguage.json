{
    "name": "HScript",
    "scopeName": "source.hscript",
    "patterns": [
        {
            "name": "keyword.script-config",
            "match": "\\?>>.*$"
        },
        {
            "name": "keyword.operator",
            "match": "\\+=|\\-=|\\*=|\\/=|\\+|-|\\*|\\!|\\~|/|%|!=|==|>|<|>=|<=|&&|\\|\\||\\^|:!=|:==|\\?|\\*\\*"
        },
        {
            "name": "keyword",
            "match": "\\b(if|else|while|until|for|foreach|try|catch|sclass|fun|func|function|typecast|return|and|or|xor|scoped|local)\\b"
        },
        {
            "name": "keyword.special",
            "match": "\\b((cscall|hscript)::|::)"
        },
        {
            "name": "hscript.method-call",
            "begin": "hscript::[a-zA-Z_][a-zA-Z0-9_]*::[a-zA-Z_][a-zA-Z0-9_]*\\s*",
            "end": "\\w+\\s*(\\*|\\)|,)",
            "patterns": [
                {
                    "include": "#entity.name.function"
                },
                {
                    "include": "#function.parameter"
                }
            ]
        },
        {
            "name": "keyword.control.hscript",
            "match": "\\b(exit)\\b"
        },
        {
            "name": "support.function.single-line",
            "begin": "\\b(fun|func|function)\\s+\\w+\\s*\\(",
            "end": "\\)\\s*(?=[-=]\\>)",
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b\\w+\\b"
                }
            ]
        },
        {
            "name": "support.function",
            "begin": "\\b(fun|func|function)\\s+\\w+\\s*\\(",
            "end": "\\)",
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b\\w+\\b"
                }
            ]
        },
        {
            "name": "comment",
            "begin": "#",
            "end": "$"
        },
        {
            "name": "constant.numeric.decimal",
            "match": "\\b[0-9_]+\\b"
        },
        {
            "name": "constant.numeric.hexadecimal",
            "match": "\\b0[xX][0-9a-fA-F_]+\\b"
        },
        {
            "name": "constant.numeric.binary",
            "match": "\\b0[bB][01_]+\\b"
        },
        {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "\""
        },
        {
            "name": "string.quoted.backtick",
            "begin": "`",
            "end": "`"
        },
        {
            "name": "variable.constant.interpolated-string",
            "begin": "\\$\"",
            "end": "\"",
            "patterns": [
            ]
        },
        {
            "name": "variable.constant.interpolated-string",
            "begin": "\\$`",
            "end": "`",
            "patterns": [
            ]
        },
        {
            "name": "constant.character",
            "match": "'.'"
        },
        {
            "name": "constant.boolean",
            "match": "\\b(true|false|:|True|False)\\b"
        },
        {
            "name": "constant.null",
            "match": "\\b(null|nil|None|undefined|void)\\b"
        },
        {
            "name": "constant.null",
            "match": "\\b(string|char|decimal|double|float|int|uint|byte|sbyte|short|ushort|long|ulong|String|Char|Byte|SByte|Int16|Int32|Int64|UInt16|UInt32|UInt64|Void|Null)\\b"
        },
        {
            "name": "support.function.single-line",
            "begin": "(?=[-=]\\>){",
            "end": "}",
            "patterns": []
        },
        {
            "name": "punctuation.definition.comment",
            "begin": "###",
            "end": "###",
            "patterns": [
                {
                    "name": "comment.block.content",
                    "begin": "^###",
                    "end": "###$"
                }
            ]
        },
        {
            "name": "punctuation.semicolon",
            "match": ";"
        },
        {
            "name": "punctuation.braces",
            "match": "{|}"
        },
        {
            "name": "punctuation.parentheses",
            "match": "\\(|\\)"
        },
        {
            "name": "punctuation.comma",
            "match": ","
        },
        {
            "name": "variable",
            "match": "\\@?[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
            "name": "variable.parameter.function",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?:,\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*)*->"
        }
    ]
}
