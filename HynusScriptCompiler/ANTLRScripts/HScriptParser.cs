//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/HynusScriptCompiler/HynusScriptCompiler/ANTLRScripts/HScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class HScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		WHILE=60, BOOL_OPERATOR=61, AND=62, OR=63, XOR=64, BINARY=65, HEX=66, 
		UINTEGER=67, FLOAT=68, INTEGER=69, STRING=70, ISTRING=71, ESCSTRING=72, 
		CHAR=73, BYTE=74, BOOL=75, SHORTHANDTRUE=76, NULL=77, TYPE=78, FUNCTIONDEC=79, 
		SCRIPTATTR=80, VERSIONSTR=81, COMMENT=82, MLCOMMENT=83, WHITESPACE=84, 
		IDENTIFIER=85;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_assignment = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_elseBlock = 5, RULE_whileBlock = 6, RULE_forBlock = 7, 
		RULE_foreachBlock = 8, RULE_tryCatch = 9, RULE_exBlock = 10, RULE_exceptionInfo = 11, 
		RULE_functionCall = 12, RULE_functionClosure = 13, RULE_functionDefinition = 14, 
		RULE_typeCastDefinition = 15, RULE_functionParameter = 16, RULE_functionPresetParameter = 17, 
		RULE_expression = 18, RULE_addOp = 19, RULE_multOp = 20, RULE_unaryOp = 21, 
		RULE_doubleOp = 22, RULE_comareOp = 23, RULE_assignOp = 24, RULE_boolOp = 25, 
		RULE_constant = 26, RULE_verbatimString = 27, RULE_scriptImport = 28, 
		RULE_libBuiltIn = 29, RULE_scriptConfiguration = 30, RULE_scriptVersion = 31, 
		RULE_changeStyle = 32, RULE_enableDebug = 33, RULE_arrBlock = 34, RULE_arrAccess = 35, 
		RULE_block = 36, RULE_lineBlock = 37, RULE_return = 38, RULE_opBlock = 39, 
		RULE_staticClass = 40, RULE_nestedVariable = 41, RULE_localIdentifier = 42, 
		RULE_tempIdentifier = 43, RULE_specialHScript = 44, RULE_specialFunctionCall = 45;
	public static readonly string[] ruleNames = {
		"program", "line", "assignment", "ifBlock", "elseIfBlock", "elseBlock", 
		"whileBlock", "forBlock", "foreachBlock", "tryCatch", "exBlock", "exceptionInfo", 
		"functionCall", "functionClosure", "functionDefinition", "typeCastDefinition", 
		"functionParameter", "functionPresetParameter", "expression", "addOp", 
		"multOp", "unaryOp", "doubleOp", "comareOp", "assignOp", "boolOp", "constant", 
		"verbatimString", "scriptImport", "libBuiltIn", "scriptConfiguration", 
		"scriptVersion", "changeStyle", "enableDebug", "arrBlock", "arrAccess", 
		"block", "lineBlock", "return", "opBlock", "staticClass", "nestedVariable", 
		"localIdentifier", "tempIdentifier", "specialHScript", "specialFunctionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'if'", "'('", "')'", "'else'", "'or'", "'for'", "'foreach'", 
		"'in'", "'try'", "','", "'catch'", "'typecast'", "'?'", "'-'", "'>'", 
		"'hscript::'", "'cscall::'", "'+'", "'*'", "'/'", "'%'", "'**'", "'~'", 
		"'!'", "'--'", "'++'", "':!='", "':=='", "'=='", "'!='", "'<'", "'>='", 
		"'<='", "'+='", "'-='", "'*='", "'/='", "'U'", "'u'", "'```'", "'import'", 
		"'using'", "'style'", "'debug'", "'['", "']'", "'{'", "'}'", "'return'", 
		"'sclass'", "'@'", "'scoped'", "'local'", "'tmp'", "'temp'", "'temporary'", 
		"'::'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "':'", null, null, null, "'?>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WHILE", "BOOL_OPERATOR", "AND", "OR", "XOR", "BINARY", "HEX", "UINTEGER", 
		"FLOAT", "INTEGER", "STRING", "ISTRING", "ESCSTRING", "CHAR", "BYTE", 
		"BOOL", "SHORTHANDTRUE", "NULL", "TYPE", "FUNCTIONDEC", "SCRIPTATTR", 
		"VERSIONSTR", "COMMENT", "MLCOMMENT", "WHITESPACE", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScriptConfigurationContext[] scriptConfiguration() {
			return GetRuleContexts<ScriptConfigurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptConfigurationContext scriptConfiguration(int i) {
			return GetRuleContext<ScriptConfigurationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptImportContext[] scriptImport() {
			return GetRuleContexts<ScriptImportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptImportContext scriptImport(int i) {
			return GetRuleContext<ScriptImportContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 92;
					scriptConfiguration();
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 98;
					scriptImport();
					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1727693407555242012L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1071103L) != 0)) {
				{
				{
				State = 104;
				line();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticClassContext staticClass() {
			return GetRuleContext<StaticClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCastDefinitionContext typeCastDefinition() {
			return GetRuleContext<TypeCastDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryCatchContext tryCatch() {
			return GetRuleContext<TryCatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 112;
				functionDefinition();
				}
				break;
			case 2:
				{
				State = 113;
				staticClass();
				}
				break;
			case 3:
				{
				State = 114;
				functionCall();
				}
				break;
			case 4:
				{
				State = 115;
				typeCastDefinition();
				}
				break;
			case 5:
				{
				State = 116;
				tryCatch();
				}
				break;
			case 6:
				{
				State = 117;
				assignment();
				}
				break;
			case 7:
				{
				State = 118;
				ifBlock();
				}
				break;
			case 8:
				{
				State = 119;
				whileBlock();
				}
				break;
			case 9:
				{
				State = 120;
				@return();
				}
				break;
			case 10:
				{
				State = 121;
				expression(0);
				}
				break;
			}
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 124;
				Match(T__0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalIdentifierContext localIdentifier() {
			return GetRuleContext<LocalIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempIdentifierContext tempIdentifier() {
			return GetRuleContext<TempIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrBlockContext arrBlock() {
			return GetRuleContext<ArrBlockContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 127;
				arrAccess();
				}
				break;
			case 2:
				{
				State = 128;
				localIdentifier();
				}
				break;
			case 3:
				{
				State = 129;
				tempIdentifier();
				}
				break;
			case 4:
				{
				State = 130;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 133;
			Match(T__1);
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__3:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__48:
			case T__52:
			case BINARY:
			case HEX:
			case UINTEGER:
			case FLOAT:
			case INTEGER:
			case STRING:
			case ISTRING:
			case ESCSTRING:
			case CHAR:
			case BYTE:
			case BOOL:
			case NULL:
			case FUNCTIONDEC:
			case IDENTIFIER:
				{
				State = 134;
				expression(0);
				}
				break;
			case T__46:
				{
				State = 135;
				arrBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__2);
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 139;
				Match(T__3);
				}
				break;
			}
			State = 142;
			expression(0);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 143;
				Match(T__4);
				}
			}

			State = 146;
			opBlock();
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 147;
				Match(T__5);
				State = 148;
				Match(T__2);
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 149;
					Match(T__3);
					}
					break;
				}
				State = 152;
				expression(0);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 153;
					Match(T__4);
					}
				}

				State = 156;
				elseIfBlock();
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 157;
						Match(T__5);
						State = 158;
						Match(T__2);
						State = 160;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
						case 1:
							{
							State = 159;
							Match(T__3);
							}
							break;
						}
						State = 162;
						expression(0);
						State = 164;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__4) {
							{
							State = 163;
							Match(T__4);
							}
						}

						State = 166;
						elseIfBlock();
						}
						} 
					}
					State = 172;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				}
				break;
			}
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 175;
				Match(T__5);
				State = 176;
				elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				opBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				ifBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			opBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(HScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext[] opBlock() {
			return GetRuleContexts<OpBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock(int i) {
			return GetRuleContext<OpBlockContext>(i);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(WHILE);
			State = 186;
			expression(0);
			State = 187;
			opBlock();
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 188;
				Match(T__6);
				State = 189;
				opBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_forBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__7);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 193;
				Match(T__3);
				}
			}

			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 2147483679L) != 0)) {
				{
				State = 196;
				assignment();
				}
			}

			State = 199;
			Match(T__0);
			State = 200;
			expression(0);
			State = 201;
			Match(T__0);
			State = 202;
			expression(0);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 203;
				Match(T__4);
				}
			}

			State = 206;
			opBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTHANDTRUE() { return GetToken(HScriptParser.SHORTHANDTRUE, 0); }
		public ForeachBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockContext foreachBlock() {
		ForeachBlockContext _localctx = new ForeachBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_foreachBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__8);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 209;
				Match(T__3);
				}
			}

			State = 212;
			assignment();
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==SHORTHANDTRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 214;
			expression(0);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 215;
				Match(T__4);
				}
			}

			State = 218;
			opBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryCatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExBlockContext[] exBlock() {
			return GetRuleContexts<ExBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExBlockContext exBlock(int i) {
			return GetRuleContext<ExBlockContext>(i);
		}
		public TryCatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryCatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryCatchContext tryCatch() {
		TryCatchContext _localctx = new TryCatchContext(Context, State);
		EnterRule(_localctx, 18, RULE_tryCatch);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(T__10);
			State = 221;
			block();
			{
			State = 222;
			exBlock();
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 223;
					Match(T__11);
					State = 224;
					exBlock();
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionInfoContext[] exceptionInfo() {
			return GetRuleContexts<ExceptionInfoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionInfoContext exceptionInfo(int i) {
			return GetRuleContext<ExceptionInfoContext>(i);
		}
		public ExBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExBlockContext exBlock() {
		ExBlockContext _localctx = new ExBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_exBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 230;
			Match(T__12);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 231;
				Match(T__3);
				}
			}

			State = 234;
			exceptionInfo();
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 235;
				Match(T__4);
				}
				break;
			}
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 238;
					Match(T__12);
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__3) {
						{
						State = 239;
						Match(T__3);
						}
					}

					State = 242;
					exceptionInfo();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 248;
				Match(T__4);
				}
			}

			}
			State = 251;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HScriptParser.IDENTIFIER, i);
		}
		public ExceptionInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionInfoContext exceptionInfo() {
		ExceptionInfoContext _localctx = new ExceptionInfoContext(Context, State);
		EnterRule(_localctx, 22, RULE_exceptionInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(IDENTIFIER);
			State = 254;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(IDENTIFIER);
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 257;
					Match(T__3);
					}
					break;
				}
				State = 268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 260;
					expression(0);
					State = 265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 261;
							Match(T__11);
							State = 262;
							expression(0);
							}
							} 
						}
						State = 267;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
					}
					}
					break;
				}
				State = 271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 270;
					Match(T__4);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 273;
				Match(T__3);
				State = 274;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionClosureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONDEC() { return GetToken(HScriptParser.FUNCTIONDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionClosureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionClosure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionClosure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionClosureContext functionClosure() {
		FunctionClosureContext _localctx = new FunctionClosureContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionClosure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(FUNCTIONDEC);
			State = 278;
			Match(T__3);
			State = 279;
			Match(T__4);
			State = 280;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONDEC() { return GetToken(HScriptParser.FUNCTIONDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			Match(FUNCTIONDEC);
			State = 283;
			Match(IDENTIFIER);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 284;
				Match(T__3);
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				{
				State = 287;
				functionParameter();
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 288;
						Match(T__11);
						State = 289;
						functionParameter();
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				}
				}
			}

			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 297;
				Match(T__4);
				}
			}

			State = 300;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCastDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(HScriptParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public TypeCastDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCastDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCastDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeCastDefinitionContext typeCastDefinition() {
		TypeCastDefinitionContext _localctx = new TypeCastDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeCastDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(T__13);
			State = 303;
			Match(TYPE);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 304;
				Match(T__3);
				}
			}

			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				{
				State = 307;
				functionParameter();
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 308;
						Match(T__11);
						State = 309;
						functionParameter();
						}
						} 
					}
					State = 314;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				}
				}
			}

			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 317;
				Match(T__4);
				}
			}

			State = 320;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPresetParameterContext functionPresetParameter() {
			return GetRuleContext<FunctionPresetParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionParameter);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322;
				functionPresetParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPresetParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionPresetParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPresetParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPresetParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPresetParameterContext functionPresetParameter() {
		FunctionPresetParameterContext _localctx = new FunctionPresetParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionPresetParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(IDENTIFIER);
			State = 327;
			Match(T__1);
			State = 328;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTHANDTRUE() { return GetToken(HScriptParser.SHORTHANDTRUE, 0); }
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComareOpContext comareOp() {
			return GetRuleContext<ComareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicCSharpCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DynamicCSharpCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicCSharpCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedVariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedVariableContext nestedVariable() {
			return GetRuleContext<NestedVariableContext>(0);
		}
		public NestedVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HscriptCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHScriptContext specialHScript() {
			return GetRuleContext<SpecialHScriptContext>(0);
		}
		public HscriptCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHscriptCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParethesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParethesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParethesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignOpExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignOpContext assignOp() {
			return GetRuleContext<AssignOpContext>(0);
		}
		public AssignOpExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleStatementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoubleOpContext doubleOp() {
			return GetRuleContext<DoubleOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoubleStatementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionClosureExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionClosureContext functionClosure() {
			return GetRuleContext<FunctionClosureContext>(0);
		}
		public FunctionClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionClosureExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 331;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new NestedVariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 332;
				nestedVariable();
				}
				break;
			case 3:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 333;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				{
				_localctx = new ArrayAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334;
				arrAccess();
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new FunctionClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336;
				functionClosure();
				}
				break;
			case 7:
				{
				_localctx = new ParethesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				Match(T__3);
				State = 338;
				expression(0);
				State = 339;
				Match(T__4);
				}
				break;
			case 8:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 341;
				unaryOp();
				State = 342;
				expression(7);
				}
				break;
			case 9:
				{
				_localctx = new DoubleStatementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 344;
				doubleOp();
				State = 345;
				expression(5);
				}
				break;
			case 10:
				{
				_localctx = new BlockExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 347;
					_la = TokenStream.LA(1);
					if ( !(_la==T__1 || _la==T__15) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 348;
					Match(T__16);
					}
					break;
				}
				State = 351;
				block();
				}
				break;
			case 11:
				{
				_localctx = new HscriptCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 352;
				Match(T__17);
				State = 353;
				specialHScript();
				}
				break;
			case 12:
				{
				_localctx = new DynamicCSharpCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 354;
				Match(T__18);
				State = 355;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 386;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 358;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 359;
						Match(T__14);
						State = 360;
						expression(0);
						State = 361;
						Match(SHORTHANDTRUE);
						State = 362;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 364;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 365;
						multOp();
						State = 366;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 368;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 369;
						addOp();
						State = 370;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 372;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 373;
						comareOp();
						State = 374;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 376;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 377;
						boolOp();
						State = 378;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new AssignOpExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 380;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 381;
						assignOp();
						State = 382;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new DoubleStatementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 384;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 385;
						doubleOp();
						}
						break;
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 38, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = TokenStream.LA(1);
			if ( !(_la==T__15 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 40, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 42, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 101777408L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleOpContext : ParserRuleContext {
		public DoubleOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleOpContext doubleOp() {
		DoubleOpContext _localctx = new DoubleOpContext(Context, State);
		EnterRule(_localctx, 44, RULE_doubleOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComareOpContext : ParserRuleContext {
		public ComareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comareOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComareOpContext comareOp() {
		ComareOpContext _localctx = new ComareOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_comareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68182736896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOpContext : ParserRuleContext {
		public AssignOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignOpContext assignOp() {
		AssignOpContext _localctx = new AssignOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1030792151040L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OPERATOR() { return GetToken(HScriptParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(Context, State);
		EnterRule(_localctx, 50, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(HScriptParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER() { return GetToken(HScriptParser.UINTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(HScriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(HScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(HScriptParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(HScriptParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(HScriptParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTRING() { return GetToken(HScriptParser.ISTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCSTRING() { return GetToken(HScriptParser.ESCSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(HScriptParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(HScriptParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 52, RULE_constant);
		int _la;
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(BOOL);
				}
				break;
			case UINTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				Match(UINTEGER);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408;
				Match(FLOAT);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 409;
				Match(HEX);
				State = 411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 410;
					_la = TokenStream.LA(1);
					if ( !(_la==T__39 || _la==T__40) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 413;
				Match(BINARY);
				State = 415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 414;
					_la = TokenStream.LA(1);
					if ( !(_la==T__39 || _la==T__40) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BYTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 417;
				Match(BYTE);
				}
				break;
			case ISTRING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 418;
				Match(ISTRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 9);
				{
				State = 419;
				Match(STRING);
				}
				break;
			case ESCSTRING:
				EnterOuterAlt(_localctx, 10);
				{
				State = 420;
				Match(ESCSTRING);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 421;
				Match(CHAR);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 422;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbatimStringContext : ParserRuleContext {
		public VerbatimStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbatimString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbatimString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbatimStringContext verbatimString() {
		VerbatimStringContext _localctx = new VerbatimStringContext(Context, State);
		EnterRule(_localctx, 54, RULE_verbatimString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(T__41);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4398046511106L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4194303L) != 0)) {
				{
				{
				State = 426;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__41) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 432;
			Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptImportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LibBuiltInContext libBuiltIn() {
			return GetRuleContext<LibBuiltInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptImportContext scriptImport() {
		ScriptImportContext _localctx = new ScriptImportContext(Context, State);
		EnterRule(_localctx, 56, RULE_scriptImport);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			_la = TokenStream.LA(1);
			if ( !(_la==T__42 || _la==T__43) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 435;
				libBuiltIn();
				}
				break;
			case 2:
				{
				State = 436;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LibBuiltInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public LibBuiltInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_libBuiltIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibBuiltIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LibBuiltInContext libBuiltIn() {
		LibBuiltInContext _localctx = new LibBuiltInContext(Context, State);
		EnterRule(_localctx, 58, RULE_libBuiltIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32) {
				{
				State = 439;
				Match(T__32);
				}
			}

			State = 442;
			Match(IDENTIFIER);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 443;
				Match(T__16);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptConfigurationContext : ParserRuleContext {
		public ScriptConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptConfiguration; } }
	 
		public ScriptConfigurationContext() { }
		public virtual void CopyFrom(ScriptConfigurationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CodeStyleCongfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeStyleContext changeStyle() {
			return GetRuleContext<ChangeStyleContext>(0);
		}
		public CodeStyleCongfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeStyleCongfig(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnableDebugConfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnableDebugContext enableDebug() {
			return GetRuleContext<EnableDebugContext>(0);
		}
		public EnableDebugConfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableDebugConfig(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScriptVersionConfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptVersionContext scriptVersion() {
			return GetRuleContext<ScriptVersionContext>(0);
		}
		public ScriptVersionConfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptVersionConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptConfigurationContext scriptConfiguration() {
		ScriptConfigurationContext _localctx = new ScriptConfigurationContext(Context, State);
		EnterRule(_localctx, 60, RULE_scriptConfiguration);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new ScriptVersionConfigContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				scriptVersion();
				}
				break;
			case 2:
				_localctx = new CodeStyleCongfigContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 447;
				changeStyle();
				}
				break;
			case 3:
				_localctx = new EnableDebugConfigContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 448;
				enableDebug();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSIONSTR() { return GetToken(HScriptParser.VERSIONSTR, 0); }
		public ScriptVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptVersionContext scriptVersion() {
		ScriptVersionContext _localctx = new ScriptVersionContext(Context, State);
		EnterRule(_localctx, 62, RULE_scriptVersion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(SCRIPTATTR);
			State = 452;
			Match(VERSIONSTR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeStyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public ChangeStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeStyle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeStyleContext changeStyle() {
		ChangeStyleContext _localctx = new ChangeStyleContext(Context, State);
		EnterRule(_localctx, 64, RULE_changeStyle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(SCRIPTATTR);
			State = 455;
			Match(T__44);
			State = 456;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableDebugContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnableDebugContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableDebug; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableDebug(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableDebugContext enableDebug() {
		EnableDebugContext _localctx = new EnableDebugContext(Context, State);
		EnterRule(_localctx, 66, RULE_enableDebug);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(SCRIPTATTR);
			State = 459;
			Match(T__45);
			State = 460;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrBlockContext arrBlock() {
		ArrBlockContext _localctx = new ArrBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_arrBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(T__46);
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9570149713379348L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1071103L) != 0)) {
				{
				State = 463;
				expression(0);
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__11) {
					{
					{
					State = 464;
					Match(T__11);
					State = 465;
					expression(0);
					}
					}
					State = 470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 473;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrAccessContext arrAccess() {
		ArrAccessContext _localctx = new ArrAccessContext(Context, State);
		EnterRule(_localctx, 70, RULE_arrAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(IDENTIFIER);
			State = 476;
			Match(T__46);
			State = 477;
			expression(0);
			State = 478;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineBlockContext lineBlock() {
			return GetRuleContext<LineBlockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_block);
		int _la;
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__48:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480;
				Match(T__48);
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1727693407555242012L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1071103L) != 0)) {
					{
					{
					State = 481;
					line();
					}
					}
					State = 486;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 487;
				Match(T__49);
				}
				break;
			case T__1:
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				lineBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public LineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineBlockContext lineBlock() {
		LineBlockContext _localctx = new LineBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_lineBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 492;
			Match(T__16);
			State = 493;
			line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 76, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(T__50);
			State = 496;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OpBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpBlockContext opBlock() {
		OpBlockContext _localctx = new OpBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_opBlock);
		int _la;
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498;
				Match(T__48);
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1727693407555242012L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1071103L) != 0)) {
					{
					{
					State = 499;
					line();
					}
					}
					State = 504;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 505;
				Match(T__49);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 506;
				line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(HScriptParser.TYPE, 0); }
		public StaticClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticClassContext staticClass() {
		StaticClassContext _localctx = new StaticClassContext(Context, State);
		EnterRule(_localctx, 80, RULE_staticClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(T__51);
			State = 510;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 511;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public NestedVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedVariableContext nestedVariable() {
		NestedVariableContext _localctx = new NestedVariableContext(Context, State);
		EnterRule(_localctx, 82, RULE_nestedVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(T__52);
			State = 514;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public LocalIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalIdentifierContext localIdentifier() {
		LocalIdentifierContext _localctx = new LocalIdentifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_localIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			_la = TokenStream.LA(1);
			if ( !(_la==T__53 || _la==T__54) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 517;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public TempIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempIdentifierContext tempIdentifier() {
		TempIdentifierContext _localctx = new TempIdentifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_tempIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504403158265495552L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 520;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFunctionCallContext specialFunctionCall() {
			return GetRuleContext<SpecialFunctionCallContext>(0);
		}
		public SpecialHScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHScript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHScriptContext specialHScript() {
		SpecialHScriptContext _localctx = new SpecialHScriptContext(Context, State);
		EnterRule(_localctx, 88, RULE_specialHScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(IDENTIFIER);
			State = 523;
			Match(T__58);
			State = 524;
			specialFunctionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SpecialFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFunctionCallContext specialFunctionCall() {
		SpecialFunctionCallContext _localctx = new SpecialFunctionCallContext(Context, State);
		EnterRule(_localctx, 90, RULE_specialFunctionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(IDENTIFIER);
			State = 543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 528;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 527;
					Match(T__3);
					}
					break;
				}
				{
				State = 530;
				expression(0);
				State = 535;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 531;
						Match(T__11);
						State = 532;
						expression(0);
						}
						} 
					}
					State = 537;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				}
				}
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 538;
					Match(T__4);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 541;
				Match(T__3);
				State = 542;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,85,546,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,5,0,94,8,0,10,0,12,0,97,9,0,1,0,5,0,
		100,8,0,10,0,12,0,103,9,0,1,0,5,0,106,8,0,10,0,12,0,109,9,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,123,8,1,1,1,3,1,126,8,1,1,2,
		1,2,1,2,1,2,3,2,132,8,2,1,2,1,2,1,2,3,2,137,8,2,1,3,1,3,3,3,141,8,3,1,
		3,1,3,3,3,145,8,3,1,3,1,3,1,3,1,3,3,3,151,8,3,1,3,1,3,3,3,155,8,3,1,3,
		1,3,1,3,1,3,3,3,161,8,3,1,3,1,3,3,3,165,8,3,1,3,1,3,5,3,169,8,3,10,3,12,
		3,172,9,3,3,3,174,8,3,1,3,1,3,3,3,178,8,3,1,4,1,4,3,4,182,8,4,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,3,6,191,8,6,1,7,1,7,3,7,195,8,7,1,7,3,7,198,8,7,1,
		7,1,7,1,7,1,7,1,7,3,7,205,8,7,1,7,1,7,1,8,1,8,3,8,211,8,8,1,8,1,8,1,8,
		1,8,3,8,217,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,226,8,9,10,9,12,9,229,
		9,9,1,10,1,10,3,10,233,8,10,1,10,1,10,3,10,237,8,10,1,10,1,10,3,10,241,
		8,10,1,10,5,10,244,8,10,10,10,12,10,247,9,10,1,10,3,10,250,8,10,1,10,1,
		10,1,11,1,11,1,11,1,12,1,12,3,12,259,8,12,1,12,1,12,1,12,5,12,264,8,12,
		10,12,12,12,267,9,12,3,12,269,8,12,1,12,3,12,272,8,12,1,12,1,12,3,12,276,
		8,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,286,8,14,1,14,1,14,1,
		14,5,14,291,8,14,10,14,12,14,294,9,14,3,14,296,8,14,1,14,3,14,299,8,14,
		1,14,1,14,1,15,1,15,1,15,3,15,306,8,15,1,15,1,15,1,15,5,15,311,8,15,10,
		15,12,15,314,9,15,3,15,316,8,15,1,15,3,15,319,8,15,1,15,1,15,1,16,1,16,
		3,16,325,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,350,8,18,
		1,18,1,18,1,18,1,18,1,18,3,18,357,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,387,8,18,10,18,12,18,390,9,
		18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,412,8,26,1,26,1,26,3,26,416,8,26,
		1,26,1,26,1,26,1,26,1,26,1,26,3,26,424,8,26,1,27,1,27,5,27,428,8,27,10,
		27,12,27,431,9,27,1,27,1,27,1,28,1,28,1,28,3,28,438,8,28,1,29,3,29,441,
		8,29,1,29,1,29,3,29,445,8,29,1,30,1,30,1,30,3,30,450,8,30,1,31,1,31,1,
		31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,467,
		8,34,10,34,12,34,470,9,34,3,34,472,8,34,1,34,1,34,1,35,1,35,1,35,1,35,
		1,35,1,36,1,36,5,36,483,8,36,10,36,12,36,486,9,36,1,36,1,36,3,36,490,8,
		36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,5,39,501,8,39,10,39,12,
		39,504,9,39,1,39,1,39,3,39,508,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
		1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,3,45,529,8,
		45,1,45,1,45,1,45,5,45,534,8,45,10,45,12,45,537,9,45,1,45,3,45,540,8,45,
		1,45,1,45,3,45,544,8,45,1,45,9,95,101,170,227,245,265,292,312,535,1,36,
		46,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,0,14,
		2,0,10,10,76,76,2,0,2,2,16,16,2,0,16,16,20,20,1,0,21,24,3,0,16,16,20,20,
		25,26,1,0,27,28,2,0,17,17,29,35,1,0,36,39,1,0,40,41,1,0,42,42,1,0,43,44,
		2,0,78,78,85,85,1,0,54,55,1,0,56,58,600,0,95,1,0,0,0,2,122,1,0,0,0,4,131,
		1,0,0,0,6,138,1,0,0,0,8,181,1,0,0,0,10,183,1,0,0,0,12,185,1,0,0,0,14,192,
		1,0,0,0,16,208,1,0,0,0,18,220,1,0,0,0,20,230,1,0,0,0,22,253,1,0,0,0,24,
		256,1,0,0,0,26,277,1,0,0,0,28,282,1,0,0,0,30,302,1,0,0,0,32,324,1,0,0,
		0,34,326,1,0,0,0,36,356,1,0,0,0,38,391,1,0,0,0,40,393,1,0,0,0,42,395,1,
		0,0,0,44,397,1,0,0,0,46,399,1,0,0,0,48,401,1,0,0,0,50,403,1,0,0,0,52,423,
		1,0,0,0,54,425,1,0,0,0,56,434,1,0,0,0,58,440,1,0,0,0,60,449,1,0,0,0,62,
		451,1,0,0,0,64,454,1,0,0,0,66,458,1,0,0,0,68,462,1,0,0,0,70,475,1,0,0,
		0,72,489,1,0,0,0,74,491,1,0,0,0,76,495,1,0,0,0,78,507,1,0,0,0,80,509,1,
		0,0,0,82,513,1,0,0,0,84,516,1,0,0,0,86,519,1,0,0,0,88,522,1,0,0,0,90,526,
		1,0,0,0,92,94,3,60,30,0,93,92,1,0,0,0,94,97,1,0,0,0,95,96,1,0,0,0,95,93,
		1,0,0,0,96,101,1,0,0,0,97,95,1,0,0,0,98,100,3,56,28,0,99,98,1,0,0,0,100,
		103,1,0,0,0,101,102,1,0,0,0,101,99,1,0,0,0,102,107,1,0,0,0,103,101,1,0,
		0,0,104,106,3,2,1,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,
		108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,111,5,0,0,1,111,1,1,0,
		0,0,112,123,3,28,14,0,113,123,3,80,40,0,114,123,3,24,12,0,115,123,3,30,
		15,0,116,123,3,18,9,0,117,123,3,4,2,0,118,123,3,6,3,0,119,123,3,12,6,0,
		120,123,3,76,38,0,121,123,3,36,18,0,122,112,1,0,0,0,122,113,1,0,0,0,122,
		114,1,0,0,0,122,115,1,0,0,0,122,116,1,0,0,0,122,117,1,0,0,0,122,118,1,
		0,0,0,122,119,1,0,0,0,122,120,1,0,0,0,122,121,1,0,0,0,123,125,1,0,0,0,
		124,126,5,1,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,3,1,0,0,0,127,132,
		3,70,35,0,128,132,3,84,42,0,129,132,3,86,43,0,130,132,5,85,0,0,131,127,
		1,0,0,0,131,128,1,0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,132,133,1,0,0,
		0,133,136,5,2,0,0,134,137,3,36,18,0,135,137,3,68,34,0,136,134,1,0,0,0,
		136,135,1,0,0,0,137,5,1,0,0,0,138,140,5,3,0,0,139,141,5,4,0,0,140,139,
		1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,144,3,36,18,0,143,145,5,5,
		0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,173,3,78,39,0,
		147,148,5,6,0,0,148,150,5,3,0,0,149,151,5,4,0,0,150,149,1,0,0,0,150,151,
		1,0,0,0,151,152,1,0,0,0,152,154,3,36,18,0,153,155,5,5,0,0,154,153,1,0,
		0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,170,3,8,4,0,157,158,5,6,0,0,158,
		160,5,3,0,0,159,161,5,4,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,
		0,0,0,162,164,3,36,18,0,163,165,5,5,0,0,164,163,1,0,0,0,164,165,1,0,0,
		0,165,166,1,0,0,0,166,167,3,8,4,0,167,169,1,0,0,0,168,157,1,0,0,0,169,
		172,1,0,0,0,170,171,1,0,0,0,170,168,1,0,0,0,171,174,1,0,0,0,172,170,1,
		0,0,0,173,147,1,0,0,0,173,174,1,0,0,0,174,177,1,0,0,0,175,176,5,6,0,0,
		176,178,3,10,5,0,177,175,1,0,0,0,177,178,1,0,0,0,178,7,1,0,0,0,179,182,
		3,78,39,0,180,182,3,6,3,0,181,179,1,0,0,0,181,180,1,0,0,0,182,9,1,0,0,
		0,183,184,3,78,39,0,184,11,1,0,0,0,185,186,5,60,0,0,186,187,3,36,18,0,
		187,190,3,78,39,0,188,189,5,7,0,0,189,191,3,78,39,0,190,188,1,0,0,0,190,
		191,1,0,0,0,191,13,1,0,0,0,192,194,5,8,0,0,193,195,5,4,0,0,194,193,1,0,
		0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,198,3,4,2,0,197,196,1,0,0,0,197,
		198,1,0,0,0,198,199,1,0,0,0,199,200,5,1,0,0,200,201,3,36,18,0,201,202,
		5,1,0,0,202,204,3,36,18,0,203,205,5,5,0,0,204,203,1,0,0,0,204,205,1,0,
		0,0,205,206,1,0,0,0,206,207,3,78,39,0,207,15,1,0,0,0,208,210,5,9,0,0,209,
		211,5,4,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,3,
		4,2,0,213,214,7,0,0,0,214,216,3,36,18,0,215,217,5,5,0,0,216,215,1,0,0,
		0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,3,78,39,0,219,17,1,0,0,0,220,
		221,5,11,0,0,221,222,3,72,36,0,222,227,3,20,10,0,223,224,5,12,0,0,224,
		226,3,20,10,0,225,223,1,0,0,0,226,229,1,0,0,0,227,228,1,0,0,0,227,225,
		1,0,0,0,228,19,1,0,0,0,229,227,1,0,0,0,230,232,5,13,0,0,231,233,5,4,0,
		0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,236,3,22,11,0,235,
		237,5,5,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,245,1,0,0,0,238,240,5,
		13,0,0,239,241,5,4,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,
		242,244,3,22,11,0,243,238,1,0,0,0,244,247,1,0,0,0,245,246,1,0,0,0,245,
		243,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,248,250,5,5,0,0,249,248,1,
		0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,252,3,72,36,0,252,21,1,0,0,0,
		253,254,5,85,0,0,254,255,5,85,0,0,255,23,1,0,0,0,256,275,5,85,0,0,257,
		259,5,4,0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,268,1,0,0,0,260,265,3,
		36,18,0,261,262,5,12,0,0,262,264,3,36,18,0,263,261,1,0,0,0,264,267,1,0,
		0,0,265,266,1,0,0,0,265,263,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,268,
		260,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,272,5,5,0,0,271,270,1,
		0,0,0,271,272,1,0,0,0,272,276,1,0,0,0,273,274,5,4,0,0,274,276,5,5,0,0,
		275,258,1,0,0,0,275,273,1,0,0,0,276,25,1,0,0,0,277,278,5,79,0,0,278,279,
		5,4,0,0,279,280,5,5,0,0,280,281,3,72,36,0,281,27,1,0,0,0,282,283,5,79,
		0,0,283,285,5,85,0,0,284,286,5,4,0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,
		295,1,0,0,0,287,292,3,32,16,0,288,289,5,12,0,0,289,291,3,32,16,0,290,288,
		1,0,0,0,291,294,1,0,0,0,292,293,1,0,0,0,292,290,1,0,0,0,293,296,1,0,0,
		0,294,292,1,0,0,0,295,287,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,
		299,5,5,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,301,3,
		72,36,0,301,29,1,0,0,0,302,303,5,14,0,0,303,305,5,78,0,0,304,306,5,4,0,
		0,305,304,1,0,0,0,305,306,1,0,0,0,306,315,1,0,0,0,307,312,3,32,16,0,308,
		309,5,12,0,0,309,311,3,32,16,0,310,308,1,0,0,0,311,314,1,0,0,0,312,313,
		1,0,0,0,312,310,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,315,307,1,0,0,
		0,315,316,1,0,0,0,316,318,1,0,0,0,317,319,5,5,0,0,318,317,1,0,0,0,318,
		319,1,0,0,0,319,320,1,0,0,0,320,321,3,72,36,0,321,31,1,0,0,0,322,325,3,
		34,17,0,323,325,5,85,0,0,324,322,1,0,0,0,324,323,1,0,0,0,325,33,1,0,0,
		0,326,327,5,85,0,0,327,328,5,2,0,0,328,329,3,52,26,0,329,35,1,0,0,0,330,
		331,6,18,-1,0,331,357,3,52,26,0,332,357,3,82,41,0,333,357,5,85,0,0,334,
		357,3,70,35,0,335,357,3,24,12,0,336,357,3,26,13,0,337,338,5,4,0,0,338,
		339,3,36,18,0,339,340,5,5,0,0,340,357,1,0,0,0,341,342,3,42,21,0,342,343,
		3,36,18,7,343,357,1,0,0,0,344,345,3,44,22,0,345,346,3,36,18,5,346,357,
		1,0,0,0,347,348,7,1,0,0,348,350,5,17,0,0,349,347,1,0,0,0,349,350,1,0,0,
		0,350,351,1,0,0,0,351,357,3,72,36,0,352,353,5,18,0,0,353,357,3,88,44,0,
		354,355,5,19,0,0,355,357,3,36,18,1,356,330,1,0,0,0,356,332,1,0,0,0,356,
		333,1,0,0,0,356,334,1,0,0,0,356,335,1,0,0,0,356,336,1,0,0,0,356,337,1,
		0,0,0,356,341,1,0,0,0,356,344,1,0,0,0,356,349,1,0,0,0,356,352,1,0,0,0,
		356,354,1,0,0,0,357,388,1,0,0,0,358,359,10,12,0,0,359,360,5,15,0,0,360,
		361,3,36,18,0,361,362,5,76,0,0,362,363,3,36,18,13,363,387,1,0,0,0,364,
		365,10,11,0,0,365,366,3,40,20,0,366,367,3,36,18,12,367,387,1,0,0,0,368,
		369,10,10,0,0,369,370,3,38,19,0,370,371,3,36,18,11,371,387,1,0,0,0,372,
		373,10,9,0,0,373,374,3,46,23,0,374,375,3,36,18,10,375,387,1,0,0,0,376,
		377,10,8,0,0,377,378,3,50,25,0,378,379,3,36,18,9,379,387,1,0,0,0,380,381,
		10,6,0,0,381,382,3,48,24,0,382,383,3,36,18,7,383,387,1,0,0,0,384,385,10,
		4,0,0,385,387,3,44,22,0,386,358,1,0,0,0,386,364,1,0,0,0,386,368,1,0,0,
		0,386,372,1,0,0,0,386,376,1,0,0,0,386,380,1,0,0,0,386,384,1,0,0,0,387,
		390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,37,1,0,0,0,390,388,1,0,
		0,0,391,392,7,2,0,0,392,39,1,0,0,0,393,394,7,3,0,0,394,41,1,0,0,0,395,
		396,7,4,0,0,396,43,1,0,0,0,397,398,7,5,0,0,398,45,1,0,0,0,399,400,7,6,
		0,0,400,47,1,0,0,0,401,402,7,7,0,0,402,49,1,0,0,0,403,404,5,61,0,0,404,
		51,1,0,0,0,405,424,5,75,0,0,406,424,5,67,0,0,407,424,5,69,0,0,408,424,
		5,68,0,0,409,411,5,66,0,0,410,412,7,8,0,0,411,410,1,0,0,0,411,412,1,0,
		0,0,412,424,1,0,0,0,413,415,5,65,0,0,414,416,7,8,0,0,415,414,1,0,0,0,415,
		416,1,0,0,0,416,424,1,0,0,0,417,424,5,74,0,0,418,424,5,71,0,0,419,424,
		5,70,0,0,420,424,5,72,0,0,421,424,5,73,0,0,422,424,5,77,0,0,423,405,1,
		0,0,0,423,406,1,0,0,0,423,407,1,0,0,0,423,408,1,0,0,0,423,409,1,0,0,0,
		423,413,1,0,0,0,423,417,1,0,0,0,423,418,1,0,0,0,423,419,1,0,0,0,423,420,
		1,0,0,0,423,421,1,0,0,0,423,422,1,0,0,0,424,53,1,0,0,0,425,429,5,42,0,
		0,426,428,8,9,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,
		430,1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,433,5,42,0,0,433,55,1,
		0,0,0,434,437,7,10,0,0,435,438,3,58,29,0,436,438,3,36,18,0,437,435,1,0,
		0,0,437,436,1,0,0,0,438,57,1,0,0,0,439,441,5,33,0,0,440,439,1,0,0,0,440,
		441,1,0,0,0,441,442,1,0,0,0,442,444,5,85,0,0,443,445,5,17,0,0,444,443,
		1,0,0,0,444,445,1,0,0,0,445,59,1,0,0,0,446,450,3,62,31,0,447,450,3,64,
		32,0,448,450,3,66,33,0,449,446,1,0,0,0,449,447,1,0,0,0,449,448,1,0,0,0,
		450,61,1,0,0,0,451,452,5,80,0,0,452,453,5,81,0,0,453,63,1,0,0,0,454,455,
		5,80,0,0,455,456,5,45,0,0,456,457,5,85,0,0,457,65,1,0,0,0,458,459,5,80,
		0,0,459,460,5,46,0,0,460,461,3,36,18,0,461,67,1,0,0,0,462,471,5,47,0,0,
		463,468,3,36,18,0,464,465,5,12,0,0,465,467,3,36,18,0,466,464,1,0,0,0,467,
		470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,472,1,0,0,0,470,468,1,
		0,0,0,471,463,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,5,48,0,0,
		474,69,1,0,0,0,475,476,5,85,0,0,476,477,5,47,0,0,477,478,3,36,18,0,478,
		479,5,48,0,0,479,71,1,0,0,0,480,484,5,49,0,0,481,483,3,2,1,0,482,481,1,
		0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,
		486,484,1,0,0,0,487,490,5,50,0,0,488,490,3,74,37,0,489,480,1,0,0,0,489,
		488,1,0,0,0,490,73,1,0,0,0,491,492,7,1,0,0,492,493,5,17,0,0,493,494,3,
		2,1,0,494,75,1,0,0,0,495,496,5,51,0,0,496,497,3,36,18,0,497,77,1,0,0,0,
		498,502,5,49,0,0,499,501,3,2,1,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,
		1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,502,1,0,0,0,505,508,5,50,0,
		0,506,508,3,2,1,0,507,498,1,0,0,0,507,506,1,0,0,0,508,79,1,0,0,0,509,510,
		5,52,0,0,510,511,7,11,0,0,511,512,3,72,36,0,512,81,1,0,0,0,513,514,5,53,
		0,0,514,515,5,85,0,0,515,83,1,0,0,0,516,517,7,12,0,0,517,518,5,85,0,0,
		518,85,1,0,0,0,519,520,7,13,0,0,520,521,5,85,0,0,521,87,1,0,0,0,522,523,
		5,85,0,0,523,524,5,59,0,0,524,525,3,90,45,0,525,89,1,0,0,0,526,543,5,85,
		0,0,527,529,5,4,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,
		535,3,36,18,0,531,532,5,12,0,0,532,534,3,36,18,0,533,531,1,0,0,0,534,537,
		1,0,0,0,535,536,1,0,0,0,535,533,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,
		0,538,540,5,5,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,544,1,0,0,0,541,
		542,5,4,0,0,542,544,5,5,0,0,543,528,1,0,0,0,543,541,1,0,0,0,544,91,1,0,
		0,0,65,95,101,107,122,125,131,136,140,144,150,154,160,164,170,173,177,
		181,190,194,197,204,210,216,227,232,236,240,245,249,258,265,268,271,275,
		285,292,295,298,305,312,315,318,324,349,356,386,388,411,415,423,429,437,
		440,444,449,468,471,484,489,502,507,528,535,539,543
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
