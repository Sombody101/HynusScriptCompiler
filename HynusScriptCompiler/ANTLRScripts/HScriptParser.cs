//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/HynusScriptCompiler/HynusScriptCompiler/ANTLRScripts/HScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class HScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, WHILE=51, BOOL_OPERATOR=52, 
		AND=53, OR=54, XOR=55, BINARY=56, HEX=57, UINTEGER=58, FLOAT=59, INTEGER=60, 
		STRING=61, ISTRING=62, ESCSTRING=63, CHAR=64, BYTE=65, BOOL=66, SHORTHANDTRUE=67, 
		NULL=68, FUNCTIONDEC=69, SCRIPTATTR=70, VERSIONSTR=71, COMMENT=72, MLCOMMENT=73, 
		WHITESPACE=74, IDENTIFIER=75;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_assignment = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_forBlock = 6, RULE_foreachBlock = 7, 
		RULE_tryCatch = 8, RULE_exceptionInfo = 9, RULE_functionCall = 10, RULE_functionClosure = 11, 
		RULE_functionDefinition = 12, RULE_functionParameter = 13, RULE_functionPresetParameter = 14, 
		RULE_expression = 15, RULE_doubleStatement = 16, RULE_addOp = 17, RULE_multOp = 18, 
		RULE_unaryOp = 19, RULE_doubleOp = 20, RULE_comareOp = 21, RULE_boolOp = 22, 
		RULE_constant = 23, RULE_verbatimString = 24, RULE_scriptConfiguration = 25, 
		RULE_scriptVersion = 26, RULE_changeStyle = 27, RULE_enableDebug = 28, 
		RULE_importScript = 29, RULE_arrBlock = 30, RULE_arrAccess = 31, RULE_block = 32, 
		RULE_lineBlock = 33, RULE_return = 34, RULE_opBlock = 35, RULE_nestedVariable = 36, 
		RULE_localIdentifier = 37, RULE_specialHScript = 38, RULE_specialFunctionCall = 39;
	public static readonly string[] ruleNames = {
		"program", "line", "assignment", "ifBlock", "elseIfBlock", "whileBlock", 
		"forBlock", "foreachBlock", "tryCatch", "exceptionInfo", "functionCall", 
		"functionClosure", "functionDefinition", "functionParameter", "functionPresetParameter", 
		"expression", "doubleStatement", "addOp", "multOp", "unaryOp", "doubleOp", 
		"comareOp", "boolOp", "constant", "verbatimString", "scriptConfiguration", 
		"scriptVersion", "changeStyle", "enableDebug", "importScript", "arrBlock", 
		"arrAccess", "block", "lineBlock", "return", "opBlock", "nestedVariable", 
		"localIdentifier", "specialHScript", "specialFunctionCall"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'if'", "'('", "')'", "'else if'", "'else'", "'or'", 
		"'for'", "'foreach'", "'in'", "'try'", "'catch'", "','", "'?'", "'-'", 
		"'>'", "'hscript::'", "'cscall::'", "'+'", "'*'", "'/'", "'%'", "'**'", 
		"'~'", "'!'", "'--'", "'++'", "':!='", "':=='", "'=='", "'!='", "'<'", 
		"'>='", "'<='", "'U'", "'u'", "'```'", "'style'", "'debug'", "'import'", 
		"'['", "']'", "'{'", "'}'", "'return'", "'@'", "'scoped'", "'local'", 
		"'::'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "':'", null, null, "'?>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WHILE", "BOOL_OPERATOR", "AND", "OR", "XOR", "BINARY", 
		"HEX", "UINTEGER", "FLOAT", "INTEGER", "STRING", "ISTRING", "ESCSTRING", 
		"CHAR", "BYTE", "BOOL", "SHORTHANDTRUE", "NULL", "FUNCTIONDEC", "SCRIPTATTR", 
		"VERSIONSTR", "COMMENT", "MLCOMMENT", "WHITESPACE", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScriptConfigurationContext[] scriptConfiguration() {
			return GetRuleContexts<ScriptConfigurationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptConfigurationContext scriptConfiguration(int i) {
			return GetRuleContext<ScriptConfigurationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 80;
					scriptConfiguration();
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -68750262959013860L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2103L) != 0)) {
				{
				{
				State = 86;
				line();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 94;
				functionDefinition();
				}
				break;
			case 2:
				{
				State = 95;
				functionCall();
				}
				break;
			case 3:
				{
				State = 96;
				assignment();
				}
				break;
			case 4:
				{
				State = 97;
				ifBlock();
				}
				break;
			case 5:
				{
				State = 98;
				whileBlock();
				}
				break;
			case 6:
				{
				State = 99;
				@return();
				}
				break;
			case 7:
				{
				State = 100;
				expression(0);
				}
				break;
			}
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 103;
				Match(T__0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalIdentifierContext localIdentifier() {
			return GetRuleContext<LocalIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrBlockContext arrBlock() {
			return GetRuleContext<ArrBlockContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 106;
				arrAccess();
				}
				break;
			case 2:
				{
				State = 107;
				localIdentifier();
				}
				break;
			case 3:
				{
				State = 108;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 111;
			Match(T__1);
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__3:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__24:
			case T__25:
			case T__46:
			case BINARY:
			case HEX:
			case UINTEGER:
			case FLOAT:
			case INTEGER:
			case STRING:
			case ISTRING:
			case ESCSTRING:
			case CHAR:
			case BYTE:
			case BOOL:
			case NULL:
			case FUNCTIONDEC:
			case IDENTIFIER:
				{
				State = 112;
				expression(0);
				}
				break;
			case T__41:
				{
				State = 113;
				arrBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__2);
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 117;
				Match(T__3);
				}
				break;
			}
			State = 120;
			expression(0);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 121;
				Match(T__4);
				}
			}

			State = 124;
			opBlock();
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 125;
				Match(T__5);
				State = 127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 126;
					Match(T__3);
					}
					break;
				}
				State = 129;
				expression(0);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 130;
					Match(T__4);
					}
				}

				State = 133;
				elseIfBlock();
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 134;
						Match(T__5);
						State = 136;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
						case 1:
							{
							State = 135;
							Match(T__3);
							}
							break;
						}
						State = 138;
						expression(0);
						State = 140;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__4) {
							{
							State = 139;
							Match(T__4);
							}
						}

						State = 142;
						elseIfBlock();
						}
						} 
					}
					State = 148;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				}
				break;
			}
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 151;
				Match(T__6);
				State = 152;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				opBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				ifBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(HScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext[] opBlock() {
			return GetRuleContexts<OpBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock(int i) {
			return GetRuleContext<OpBlockContext>(i);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(WHILE);
			State = 160;
			expression(0);
			State = 161;
			opBlock();
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 162;
				Match(T__7);
				State = 163;
				opBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_forBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(T__8);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 167;
				Match(T__3);
				}
			}

			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & 134217731L) != 0)) {
				{
				State = 170;
				assignment();
				}
			}

			State = 173;
			Match(T__0);
			State = 174;
			expression(0);
			State = 175;
			Match(T__0);
			State = 176;
			expression(0);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 177;
				Match(T__4);
				}
			}

			State = 180;
			opBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpBlockContext opBlock() {
			return GetRuleContext<OpBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTHANDTRUE() { return GetToken(HScriptParser.SHORTHANDTRUE, 0); }
		public ForeachBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachBlockContext foreachBlock() {
		ForeachBlockContext _localctx = new ForeachBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_foreachBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__9);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 183;
				Match(T__3);
				}
			}

			State = 186;
			assignment();
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==SHORTHANDTRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 188;
			expression(0);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 189;
				Match(T__4);
				}
			}

			State = 192;
			opBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryCatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionInfoContext exceptionInfo() {
			return GetRuleContext<ExceptionInfoContext>(0);
		}
		public TryCatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryCatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryCatchContext tryCatch() {
		TryCatchContext _localctx = new TryCatchContext(Context, State);
		EnterRule(_localctx, 16, RULE_tryCatch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__11);
			State = 195;
			block();
			State = 196;
			Match(T__12);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 197;
				Match(T__3);
				State = 198;
				exceptionInfo();
				State = 199;
				Match(T__4);
				}
			}

			State = 203;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HScriptParser.IDENTIFIER, i);
		}
		public ExceptionInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionInfoContext exceptionInfo() {
		ExceptionInfoContext _localctx = new ExceptionInfoContext(Context, State);
		EnterRule(_localctx, 18, RULE_exceptionInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(IDENTIFIER);
			State = 206;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(IDENTIFIER);
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 209;
					Match(T__3);
					}
					break;
				}
				State = 220;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 212;
					expression(0);
					State = 217;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 213;
							Match(T__13);
							State = 214;
							expression(0);
							}
							} 
						}
						State = 219;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
					}
					}
					break;
				}
				State = 223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 222;
					Match(T__4);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 225;
				Match(T__3);
				State = 226;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionClosureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONDEC() { return GetToken(HScriptParser.FUNCTIONDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionClosureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionClosure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionClosure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionClosureContext functionClosure() {
		FunctionClosureContext _localctx = new FunctionClosureContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionClosure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(FUNCTIONDEC);
			State = 230;
			Match(T__3);
			State = 231;
			Match(T__4);
			State = 232;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONDEC() { return GetToken(HScriptParser.FUNCTIONDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(FUNCTIONDEC);
			State = 235;
			Match(IDENTIFIER);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 236;
				Match(T__3);
				}
			}

			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				{
				State = 239;
				functionParameter();
				State = 244;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 240;
						Match(T__13);
						State = 241;
						functionParameter();
						}
						} 
					}
					State = 246;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				}
				}
			}

			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 249;
				Match(T__4);
				}
			}

			State = 252;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPresetParameterContext functionPresetParameter() {
			return GetRuleContext<FunctionPresetParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_functionParameter);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				functionPresetParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPresetParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionPresetParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPresetParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPresetParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPresetParameterContext functionPresetParameter() {
		FunctionPresetParameterContext _localctx = new FunctionPresetParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionPresetParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(IDENTIFIER);
			State = 259;
			Match(T__1);
			State = 260;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTHANDTRUE() { return GetToken(HScriptParser.SHORTHANDTRUE, 0); }
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComareOpContext comareOp() {
			return GetRuleContext<ComareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DynamicCSharpCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DynamicCSharpCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicCSharpCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedVariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedVariableContext nestedVariable() {
			return GetRuleContext<NestedVariableContext>(0);
		}
		public NestedVariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HscriptCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialHScriptContext specialHScript() {
			return GetRuleContext<SpecialHScriptContext>(0);
		}
		public HscriptCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHscriptCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrAccessContext arrAccess() {
			return GetRuleContext<ArrAccessContext>(0);
		}
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParethesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParethesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParethesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionClosureExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionClosureContext functionClosure() {
			return GetRuleContext<FunctionClosureContext>(0);
		}
		public FunctionClosureExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionClosureExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 263;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new NestedVariableExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264;
				nestedVariable();
				}
				break;
			case 3:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 265;
				Match(IDENTIFIER);
				}
				break;
			case 4:
				{
				_localctx = new ArrayAccessExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				arrAccess();
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 267;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new FunctionClosureExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 268;
				functionClosure();
				}
				break;
			case 7:
				{
				_localctx = new ParethesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 269;
				Match(T__3);
				State = 270;
				expression(0);
				State = 271;
				Match(T__4);
				}
				break;
			case 8:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 273;
				unaryOp();
				State = 274;
				expression(4);
				}
				break;
			case 9:
				{
				_localctx = new BlockExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 276;
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__15) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 277;
				Match(T__16);
				State = 278;
				block();
				}
				break;
			case 10:
				{
				_localctx = new HscriptCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				Match(T__17);
				State = 280;
				specialHScript();
				}
				break;
			case 11:
				{
				_localctx = new DynamicCSharpCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 281;
				Match(T__18);
				State = 282;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 307;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 286;
						Match(T__14);
						State = 287;
						expression(0);
						State = 288;
						Match(SHORTHANDTRUE);
						State = 289;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 292;
						multOp();
						State = 293;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 295;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 296;
						addOp();
						State = 297;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 299;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 300;
						comareOp();
						State = 301;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 304;
						boolOp();
						State = 305;
						expression(6);
						}
						break;
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DoubleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoubleOpContext doubleOp() {
			return GetRuleContext<DoubleOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoubleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleStatementContext doubleStatement() {
		DoubleStatementContext _localctx = new DoubleStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_doubleStatement);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__26:
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				doubleOp();
				State = 313;
				expression(0);
				}
				break;
			case T__1:
			case T__3:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__24:
			case T__25:
			case T__46:
			case BINARY:
			case HEX:
			case UINTEGER:
			case FLOAT:
			case INTEGER:
			case STRING:
			case ISTRING:
			case ESCSTRING:
			case CHAR:
			case BYTE:
			case BOOL:
			case NULL:
			case FUNCTIONDEC:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				expression(0);
				State = 316;
				doubleOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 34, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			_la = TokenStream.LA(1);
			if ( !(_la==T__15 || _la==T__19) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 101777408L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleOpContext : ParserRuleContext {
		public DoubleOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleOpContext doubleOp() {
		DoubleOpContext _localctx = new DoubleOpContext(Context, State);
		EnterRule(_localctx, 40, RULE_doubleOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComareOpContext : ParserRuleContext {
		public ComareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comareOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComareOpContext comareOp() {
		ComareOpContext _localctx = new ComareOpContext(Context, State);
		EnterRule(_localctx, 42, RULE_comareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 68182736896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OPERATOR() { return GetToken(HScriptParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(Context, State);
		EnterRule(_localctx, 44, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(HScriptParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER() { return GetToken(HScriptParser.UINTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(HScriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(HScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(HScriptParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(HScriptParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(HScriptParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISTRING() { return GetToken(HScriptParser.ISTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCSTRING() { return GetToken(HScriptParser.ESCSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(HScriptParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(HScriptParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 46, RULE_constant);
		int _la;
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				Match(BOOL);
				}
				break;
			case UINTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				Match(UINTEGER);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 334;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 335;
				Match(FLOAT);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 336;
				Match(HEX);
				State = 338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 337;
					_la = TokenStream.LA(1);
					if ( !(_la==T__35 || _la==T__36) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 340;
				Match(BINARY);
				State = 342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 341;
					_la = TokenStream.LA(1);
					if ( !(_la==T__35 || _la==T__36) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BYTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 344;
				Match(BYTE);
				}
				break;
			case ISTRING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 345;
				Match(ISTRING);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 9);
				{
				State = 346;
				Match(STRING);
				}
				break;
			case ESCSTRING:
				EnterOuterAlt(_localctx, 10);
				{
				State = 347;
				Match(ESCSTRING);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 348;
				Match(CHAR);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 349;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerbatimStringContext : ParserRuleContext {
		public VerbatimStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_verbatimString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVerbatimString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VerbatimStringContext verbatimString() {
		VerbatimStringContext _localctx = new VerbatimStringContext(Context, State);
		EnterRule(_localctx, 48, RULE_verbatimString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(T__37);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -274877906946L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4095L) != 0)) {
				{
				{
				State = 353;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__37) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptConfigurationContext : ParserRuleContext {
		public ScriptConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptConfiguration; } }
	 
		public ScriptConfigurationContext() { }
		public virtual void CopyFrom(ScriptConfigurationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CodeStyleCongfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeStyleContext changeStyle() {
			return GetRuleContext<ChangeStyleContext>(0);
		}
		public CodeStyleCongfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeStyleCongfig(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnableDebugConfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnableDebugContext enableDebug() {
			return GetRuleContext<EnableDebugContext>(0);
		}
		public EnableDebugConfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableDebugConfig(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImportScriptConfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportScriptContext importScript() {
			return GetRuleContext<ImportScriptContext>(0);
		}
		public ImportScriptConfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportScriptConfig(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScriptVersionConfigContext : ScriptConfigurationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptVersionContext scriptVersion() {
			return GetRuleContext<ScriptVersionContext>(0);
		}
		public ScriptVersionConfigContext(ScriptConfigurationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptVersionConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptConfigurationContext scriptConfiguration() {
		ScriptConfigurationContext _localctx = new ScriptConfigurationContext(Context, State);
		EnterRule(_localctx, 50, RULE_scriptConfiguration);
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				_localctx = new ScriptVersionConfigContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				scriptVersion();
				}
				break;
			case 2:
				_localctx = new CodeStyleCongfigContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				changeStyle();
				}
				break;
			case 3:
				_localctx = new EnableDebugConfigContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 363;
				enableDebug();
				}
				break;
			case 4:
				_localctx = new ImportScriptConfigContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 364;
				importScript();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSIONSTR() { return GetToken(HScriptParser.VERSIONSTR, 0); }
		public ScriptVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptVersionContext scriptVersion() {
		ScriptVersionContext _localctx = new ScriptVersionContext(Context, State);
		EnterRule(_localctx, 52, RULE_scriptVersion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(SCRIPTATTR);
			State = 368;
			Match(VERSIONSTR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeStyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public ChangeStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeStyle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeStyleContext changeStyle() {
		ChangeStyleContext _localctx = new ChangeStyleContext(Context, State);
		EnterRule(_localctx, 54, RULE_changeStyle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(SCRIPTATTR);
			State = 371;
			Match(T__38);
			State = 372;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableDebugContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnableDebugContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableDebug; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableDebug(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableDebugContext enableDebug() {
		EnableDebugContext _localctx = new EnableDebugContext(Context, State);
		EnterRule(_localctx, 56, RULE_enableDebug);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(SCRIPTATTR);
			State = 375;
			Match(T__39);
			State = 376;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public ImportScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importScript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportScriptContext importScript() {
		ImportScriptContext _localctx = new ImportScriptContext(Context, State);
		EnterRule(_localctx, 58, RULE_importScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(SCRIPTATTR);
			State = 379;
			Match(T__40);
			State = 380;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrBlockContext arrBlock() {
		ArrBlockContext _localctx = new ArrBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_arrBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(T__41);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -71916856447008748L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2103L) != 0)) {
				{
				State = 383;
				expression(0);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 384;
					Match(T__13);
					State = 385;
					expression(0);
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 393;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrAccessContext arrAccess() {
		ArrAccessContext _localctx = new ArrAccessContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(IDENTIFIER);
			State = 396;
			Match(T__41);
			State = 397;
			expression(0);
			State = 398;
			Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineBlockContext lineBlock() {
			return GetRuleContext<LineBlockContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_block);
		int _la;
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				Match(T__43);
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -68750262959013860L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2103L) != 0)) {
					{
					{
					State = 401;
					line();
					}
					}
					State = 406;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 407;
				Match(T__44);
				}
				break;
			case T__1:
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				lineBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public LineBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineBlockContext lineBlock() {
		LineBlockContext _localctx = new LineBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_lineBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 412;
			Match(T__16);
			State = 413;
			line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 68, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			Match(T__45);
			State = 416;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OpBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpBlockContext opBlock() {
		OpBlockContext _localctx = new OpBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_opBlock);
		int _la;
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				Match(T__43);
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -68750262959013860L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2103L) != 0)) {
					{
					{
					State = 419;
					line();
					}
					}
					State = 424;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 425;
				Match(T__44);
				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__15:
			case T__17:
			case T__18:
			case T__19:
			case T__24:
			case T__25:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case WHILE:
			case BINARY:
			case HEX:
			case UINTEGER:
			case FLOAT:
			case INTEGER:
			case STRING:
			case ISTRING:
			case ESCSTRING:
			case CHAR:
			case BYTE:
			case BOOL:
			case NULL:
			case FUNCTIONDEC:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426;
				line();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public NestedVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedVariableContext nestedVariable() {
		NestedVariableContext _localctx = new NestedVariableContext(Context, State);
		EnterRule(_localctx, 72, RULE_nestedVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(T__46);
			State = 430;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public LocalIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalIdentifierContext localIdentifier() {
		LocalIdentifierContext _localctx = new LocalIdentifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_localIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_la = TokenStream.LA(1);
			if ( !(_la==T__47 || _la==T__48) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 433;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialHScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFunctionCallContext specialFunctionCall() {
			return GetRuleContext<SpecialFunctionCallContext>(0);
		}
		public SpecialHScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialHScript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialHScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialHScriptContext specialHScript() {
		SpecialHScriptContext _localctx = new SpecialHScriptContext(Context, State);
		EnterRule(_localctx, 76, RULE_specialHScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(IDENTIFIER);
			State = 436;
			Match(T__49);
			State = 437;
			specialFunctionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SpecialFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFunctionCallContext specialFunctionCall() {
		SpecialFunctionCallContext _localctx = new SpecialFunctionCallContext(Context, State);
		EnterRule(_localctx, 78, RULE_specialFunctionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(IDENTIFIER);
			State = 456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 440;
					Match(T__3);
					}
					break;
				}
				{
				State = 443;
				expression(0);
				State = 448;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 444;
						Match(T__13);
						State = 445;
						expression(0);
						}
						} 
					}
					State = 450;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
				}
				}
				State = 452;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 451;
					Match(T__4);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 454;
				Match(T__3);
				State = 455;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,459,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,5,0,82,8,0,10,0,12,0,85,9,
		0,1,0,5,0,88,8,0,10,0,12,0,91,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		3,1,102,8,1,1,1,3,1,105,8,1,1,2,1,2,1,2,3,2,110,8,2,1,2,1,2,1,2,3,2,115,
		8,2,1,3,1,3,3,3,119,8,3,1,3,1,3,3,3,123,8,3,1,3,1,3,1,3,3,3,128,8,3,1,
		3,1,3,3,3,132,8,3,1,3,1,3,1,3,3,3,137,8,3,1,3,1,3,3,3,141,8,3,1,3,1,3,
		5,3,145,8,3,10,3,12,3,148,9,3,3,3,150,8,3,1,3,1,3,3,3,154,8,3,1,4,1,4,
		3,4,158,8,4,1,5,1,5,1,5,1,5,1,5,3,5,165,8,5,1,6,1,6,3,6,169,8,6,1,6,3,
		6,172,8,6,1,6,1,6,1,6,1,6,1,6,3,6,179,8,6,1,6,1,6,1,7,1,7,3,7,185,8,7,
		1,7,1,7,1,7,1,7,3,7,191,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,202,
		8,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,3,10,211,8,10,1,10,1,10,1,10,5,10,216,
		8,10,10,10,12,10,219,9,10,3,10,221,8,10,1,10,3,10,224,8,10,1,10,1,10,3,
		10,228,8,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,238,8,12,1,12,
		1,12,1,12,5,12,243,8,12,10,12,12,12,246,9,12,3,12,248,8,12,1,12,3,12,251,
		8,12,1,12,1,12,1,13,1,13,3,13,257,8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,3,15,284,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,5,15,308,8,15,10,15,12,15,311,9,15,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,319,8,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,339,8,23,1,23,1,23,3,23,343,8,23,
		1,23,1,23,1,23,1,23,1,23,1,23,3,23,351,8,23,1,24,1,24,5,24,355,8,24,10,
		24,12,24,358,9,24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,366,8,25,1,26,1,26,
		1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,
		1,30,1,30,1,30,5,30,387,8,30,10,30,12,30,390,9,30,3,30,392,8,30,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,5,32,403,8,32,10,32,12,32,406,9,
		32,1,32,1,32,3,32,410,8,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
		5,35,421,8,35,10,35,12,35,424,9,35,1,35,1,35,3,35,428,8,35,1,36,1,36,1,
		36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,3,39,442,8,39,1,39,1,39,
		1,39,5,39,447,8,39,10,39,12,39,450,9,39,1,39,3,39,453,8,39,1,39,1,39,3,
		39,457,8,39,1,39,5,83,146,217,244,448,1,30,40,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,0,10,2,0,11,11,67,67,2,0,2,2,16,16,2,0,16,16,20,20,1,
		0,21,24,3,0,16,16,20,20,25,26,1,0,27,28,2,0,17,17,29,35,1,0,36,37,1,0,
		38,38,1,0,48,49,500,0,83,1,0,0,0,2,101,1,0,0,0,4,109,1,0,0,0,6,116,1,0,
		0,0,8,157,1,0,0,0,10,159,1,0,0,0,12,166,1,0,0,0,14,182,1,0,0,0,16,194,
		1,0,0,0,18,205,1,0,0,0,20,208,1,0,0,0,22,229,1,0,0,0,24,234,1,0,0,0,26,
		256,1,0,0,0,28,258,1,0,0,0,30,283,1,0,0,0,32,318,1,0,0,0,34,320,1,0,0,
		0,36,322,1,0,0,0,38,324,1,0,0,0,40,326,1,0,0,0,42,328,1,0,0,0,44,330,1,
		0,0,0,46,350,1,0,0,0,48,352,1,0,0,0,50,365,1,0,0,0,52,367,1,0,0,0,54,370,
		1,0,0,0,56,374,1,0,0,0,58,378,1,0,0,0,60,382,1,0,0,0,62,395,1,0,0,0,64,
		409,1,0,0,0,66,411,1,0,0,0,68,415,1,0,0,0,70,427,1,0,0,0,72,429,1,0,0,
		0,74,432,1,0,0,0,76,435,1,0,0,0,78,439,1,0,0,0,80,82,3,50,25,0,81,80,1,
		0,0,0,82,85,1,0,0,0,83,84,1,0,0,0,83,81,1,0,0,0,84,89,1,0,0,0,85,83,1,
		0,0,0,86,88,3,2,1,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,
		0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,0,0,1,93,1,1,0,0,0,94,102,3,
		24,12,0,95,102,3,20,10,0,96,102,3,4,2,0,97,102,3,6,3,0,98,102,3,10,5,0,
		99,102,3,68,34,0,100,102,3,30,15,0,101,94,1,0,0,0,101,95,1,0,0,0,101,96,
		1,0,0,0,101,97,1,0,0,0,101,98,1,0,0,0,101,99,1,0,0,0,101,100,1,0,0,0,102,
		104,1,0,0,0,103,105,5,1,0,0,104,103,1,0,0,0,104,105,1,0,0,0,105,3,1,0,
		0,0,106,110,3,62,31,0,107,110,3,74,37,0,108,110,5,75,0,0,109,106,1,0,0,
		0,109,107,1,0,0,0,109,108,1,0,0,0,110,111,1,0,0,0,111,114,5,2,0,0,112,
		115,3,30,15,0,113,115,3,60,30,0,114,112,1,0,0,0,114,113,1,0,0,0,115,5,
		1,0,0,0,116,118,5,3,0,0,117,119,5,4,0,0,118,117,1,0,0,0,118,119,1,0,0,
		0,119,120,1,0,0,0,120,122,3,30,15,0,121,123,5,5,0,0,122,121,1,0,0,0,122,
		123,1,0,0,0,123,124,1,0,0,0,124,149,3,70,35,0,125,127,5,6,0,0,126,128,
		5,4,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,131,3,30,15,
		0,130,132,5,5,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,
		146,3,8,4,0,134,136,5,6,0,0,135,137,5,4,0,0,136,135,1,0,0,0,136,137,1,
		0,0,0,137,138,1,0,0,0,138,140,3,30,15,0,139,141,5,5,0,0,140,139,1,0,0,
		0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,3,8,4,0,143,145,1,0,0,0,144,
		134,1,0,0,0,145,148,1,0,0,0,146,147,1,0,0,0,146,144,1,0,0,0,147,150,1,
		0,0,0,148,146,1,0,0,0,149,125,1,0,0,0,149,150,1,0,0,0,150,153,1,0,0,0,
		151,152,5,7,0,0,152,154,3,8,4,0,153,151,1,0,0,0,153,154,1,0,0,0,154,7,
		1,0,0,0,155,158,3,70,35,0,156,158,3,6,3,0,157,155,1,0,0,0,157,156,1,0,
		0,0,158,9,1,0,0,0,159,160,5,51,0,0,160,161,3,30,15,0,161,164,3,70,35,0,
		162,163,5,8,0,0,163,165,3,70,35,0,164,162,1,0,0,0,164,165,1,0,0,0,165,
		11,1,0,0,0,166,168,5,9,0,0,167,169,5,4,0,0,168,167,1,0,0,0,168,169,1,0,
		0,0,169,171,1,0,0,0,170,172,3,4,2,0,171,170,1,0,0,0,171,172,1,0,0,0,172,
		173,1,0,0,0,173,174,5,1,0,0,174,175,3,30,15,0,175,176,5,1,0,0,176,178,
		3,30,15,0,177,179,5,5,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,
		0,0,180,181,3,70,35,0,181,13,1,0,0,0,182,184,5,10,0,0,183,185,5,4,0,0,
		184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,3,4,2,0,187,188,
		7,0,0,0,188,190,3,30,15,0,189,191,5,5,0,0,190,189,1,0,0,0,190,191,1,0,
		0,0,191,192,1,0,0,0,192,193,3,70,35,0,193,15,1,0,0,0,194,195,5,12,0,0,
		195,196,3,64,32,0,196,201,5,13,0,0,197,198,5,4,0,0,198,199,3,18,9,0,199,
		200,5,5,0,0,200,202,1,0,0,0,201,197,1,0,0,0,201,202,1,0,0,0,202,203,1,
		0,0,0,203,204,3,64,32,0,204,17,1,0,0,0,205,206,5,75,0,0,206,207,5,75,0,
		0,207,19,1,0,0,0,208,227,5,75,0,0,209,211,5,4,0,0,210,209,1,0,0,0,210,
		211,1,0,0,0,211,220,1,0,0,0,212,217,3,30,15,0,213,214,5,14,0,0,214,216,
		3,30,15,0,215,213,1,0,0,0,216,219,1,0,0,0,217,218,1,0,0,0,217,215,1,0,
		0,0,218,221,1,0,0,0,219,217,1,0,0,0,220,212,1,0,0,0,220,221,1,0,0,0,221,
		223,1,0,0,0,222,224,5,5,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,228,1,
		0,0,0,225,226,5,4,0,0,226,228,5,5,0,0,227,210,1,0,0,0,227,225,1,0,0,0,
		228,21,1,0,0,0,229,230,5,69,0,0,230,231,5,4,0,0,231,232,5,5,0,0,232,233,
		3,64,32,0,233,23,1,0,0,0,234,235,5,69,0,0,235,237,5,75,0,0,236,238,5,4,
		0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,247,1,0,0,0,239,244,3,26,13,0,
		240,241,5,14,0,0,241,243,3,26,13,0,242,240,1,0,0,0,243,246,1,0,0,0,244,
		245,1,0,0,0,244,242,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,247,239,1,
		0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,251,5,5,0,0,250,249,1,0,0,0,
		250,251,1,0,0,0,251,252,1,0,0,0,252,253,3,64,32,0,253,25,1,0,0,0,254,257,
		3,28,14,0,255,257,5,75,0,0,256,254,1,0,0,0,256,255,1,0,0,0,257,27,1,0,
		0,0,258,259,5,75,0,0,259,260,5,2,0,0,260,261,3,46,23,0,261,29,1,0,0,0,
		262,263,6,15,-1,0,263,284,3,46,23,0,264,284,3,72,36,0,265,284,5,75,0,0,
		266,284,3,62,31,0,267,284,3,20,10,0,268,284,3,22,11,0,269,270,5,4,0,0,
		270,271,3,30,15,0,271,272,5,5,0,0,272,284,1,0,0,0,273,274,3,38,19,0,274,
		275,3,30,15,4,275,284,1,0,0,0,276,277,7,1,0,0,277,278,5,17,0,0,278,284,
		3,64,32,0,279,280,5,18,0,0,280,284,3,76,38,0,281,282,5,19,0,0,282,284,
		3,30,15,1,283,262,1,0,0,0,283,264,1,0,0,0,283,265,1,0,0,0,283,266,1,0,
		0,0,283,267,1,0,0,0,283,268,1,0,0,0,283,269,1,0,0,0,283,273,1,0,0,0,283,
		276,1,0,0,0,283,279,1,0,0,0,283,281,1,0,0,0,284,309,1,0,0,0,285,286,10,
		9,0,0,286,287,5,15,0,0,287,288,3,30,15,0,288,289,5,67,0,0,289,290,3,30,
		15,10,290,308,1,0,0,0,291,292,10,8,0,0,292,293,3,36,18,0,293,294,3,30,
		15,9,294,308,1,0,0,0,295,296,10,7,0,0,296,297,3,34,17,0,297,298,3,30,15,
		8,298,308,1,0,0,0,299,300,10,6,0,0,300,301,3,42,21,0,301,302,3,30,15,7,
		302,308,1,0,0,0,303,304,10,5,0,0,304,305,3,44,22,0,305,306,3,30,15,6,306,
		308,1,0,0,0,307,285,1,0,0,0,307,291,1,0,0,0,307,295,1,0,0,0,307,299,1,
		0,0,0,307,303,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,
		310,31,1,0,0,0,311,309,1,0,0,0,312,313,3,40,20,0,313,314,3,30,15,0,314,
		319,1,0,0,0,315,316,3,30,15,0,316,317,3,40,20,0,317,319,1,0,0,0,318,312,
		1,0,0,0,318,315,1,0,0,0,319,33,1,0,0,0,320,321,7,2,0,0,321,35,1,0,0,0,
		322,323,7,3,0,0,323,37,1,0,0,0,324,325,7,4,0,0,325,39,1,0,0,0,326,327,
		7,5,0,0,327,41,1,0,0,0,328,329,7,6,0,0,329,43,1,0,0,0,330,331,5,52,0,0,
		331,45,1,0,0,0,332,351,5,66,0,0,333,351,5,58,0,0,334,351,5,60,0,0,335,
		351,5,59,0,0,336,338,5,57,0,0,337,339,7,7,0,0,338,337,1,0,0,0,338,339,
		1,0,0,0,339,351,1,0,0,0,340,342,5,56,0,0,341,343,7,7,0,0,342,341,1,0,0,
		0,342,343,1,0,0,0,343,351,1,0,0,0,344,351,5,65,0,0,345,351,5,62,0,0,346,
		351,5,61,0,0,347,351,5,63,0,0,348,351,5,64,0,0,349,351,5,68,0,0,350,332,
		1,0,0,0,350,333,1,0,0,0,350,334,1,0,0,0,350,335,1,0,0,0,350,336,1,0,0,
		0,350,340,1,0,0,0,350,344,1,0,0,0,350,345,1,0,0,0,350,346,1,0,0,0,350,
		347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,47,1,0,0,0,352,356,5,38,
		0,0,353,355,8,8,0,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,
		357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,360,5,38,0,0,360,49,1,
		0,0,0,361,366,3,52,26,0,362,366,3,54,27,0,363,366,3,56,28,0,364,366,3,
		58,29,0,365,361,1,0,0,0,365,362,1,0,0,0,365,363,1,0,0,0,365,364,1,0,0,
		0,366,51,1,0,0,0,367,368,5,70,0,0,368,369,5,71,0,0,369,53,1,0,0,0,370,
		371,5,70,0,0,371,372,5,39,0,0,372,373,5,75,0,0,373,55,1,0,0,0,374,375,
		5,70,0,0,375,376,5,40,0,0,376,377,3,30,15,0,377,57,1,0,0,0,378,379,5,70,
		0,0,379,380,5,41,0,0,380,381,5,75,0,0,381,59,1,0,0,0,382,391,5,42,0,0,
		383,388,3,30,15,0,384,385,5,14,0,0,385,387,3,30,15,0,386,384,1,0,0,0,387,
		390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,392,1,0,0,0,390,388,1,
		0,0,0,391,383,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,5,43,0,0,
		394,61,1,0,0,0,395,396,5,75,0,0,396,397,5,42,0,0,397,398,3,30,15,0,398,
		399,5,43,0,0,399,63,1,0,0,0,400,404,5,44,0,0,401,403,3,2,1,0,402,401,1,
		0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,
		406,404,1,0,0,0,407,410,5,45,0,0,408,410,3,66,33,0,409,400,1,0,0,0,409,
		408,1,0,0,0,410,65,1,0,0,0,411,412,7,1,0,0,412,413,5,17,0,0,413,414,3,
		2,1,0,414,67,1,0,0,0,415,416,5,46,0,0,416,417,3,30,15,0,417,69,1,0,0,0,
		418,422,5,44,0,0,419,421,3,2,1,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,
		1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,428,5,45,0,
		0,426,428,3,2,1,0,427,418,1,0,0,0,427,426,1,0,0,0,428,71,1,0,0,0,429,430,
		5,47,0,0,430,431,5,75,0,0,431,73,1,0,0,0,432,433,7,9,0,0,433,434,5,75,
		0,0,434,75,1,0,0,0,435,436,5,75,0,0,436,437,5,50,0,0,437,438,3,78,39,0,
		438,77,1,0,0,0,439,456,5,75,0,0,440,442,5,4,0,0,441,440,1,0,0,0,441,442,
		1,0,0,0,442,443,1,0,0,0,443,448,3,30,15,0,444,445,5,14,0,0,445,447,3,30,
		15,0,446,444,1,0,0,0,447,450,1,0,0,0,448,449,1,0,0,0,448,446,1,0,0,0,449,
		452,1,0,0,0,450,448,1,0,0,0,451,453,5,5,0,0,452,451,1,0,0,0,452,453,1,
		0,0,0,453,457,1,0,0,0,454,455,5,4,0,0,455,457,5,5,0,0,456,441,1,0,0,0,
		456,454,1,0,0,0,457,79,1,0,0,0,52,83,89,101,104,109,114,118,122,127,131,
		136,140,146,149,153,157,164,168,171,178,184,190,201,210,217,220,223,227,
		237,244,247,250,256,283,307,309,318,338,342,350,356,365,388,391,404,409,
		422,427,441,448,452,456
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
