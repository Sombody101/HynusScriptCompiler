//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/HynusScriptCompiler/HynusScriptCompiler/ANTLRScripts/HScript.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class HScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, WHILE=40, BOOL_OPERATOR=41, BINARY=42, HEX=43, UINTEGER=44, 
		FLOAT=45, INTEGER=46, STRING=47, CHAR=48, BYTE=49, BOOL=50, NULL=51, AND=52, 
		OR=53, XOR=54, FUNCTIONDEC=55, SCRIPTATTR=56, VERSIONSTR=57, COMMENT=58, 
		MLCOMMENT=59, WHITESPACE=60, IDENTIFIER=61;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_assignment = 6, RULE_functionDefinition = 7, 
		RULE_functionCall = 8, RULE_tryCatch = 9, RULE_exceptionInfo = 10, RULE_expression = 11, 
		RULE_interpolatedString = 12, RULE_nestedVariable = 13, RULE_unaryOp = 14, 
		RULE_doubleStatement = 15, RULE_doubleOp = 16, RULE_multOp = 17, RULE_addOp = 18, 
		RULE_comareOp = 19, RULE_boolOp = 20, RULE_constant = 21, RULE_scriptVersion = 22, 
		RULE_changeStyle = 23, RULE_changeDefault = 24, RULE_block = 25;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseIfBlock", "whileBlock", 
		"assignment", "functionDefinition", "functionCall", "tryCatch", "exceptionInfo", 
		"expression", "interpolatedString", "nestedVariable", "unaryOp", "doubleStatement", 
		"doubleOp", "multOp", "addOp", "comareOp", "boolOp", "constant", "scriptVersion", 
		"changeStyle", "changeDefault", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'('", "')'", "'else'", "'or'", "'='", "','", "'try'", 
		"'catch'", "'?'", "':'", "'$'", "'-'", "'+'", "'~'", "'!'", "'--'", "'++'", 
		"'*'", "'/'", "'%'", "'**'", "':!='", "':=='", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'U'", "'u'", "'F'", "'f'", "'style'", "'default'", 
		"'{'", "'}'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'?>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "WHILE", "BOOL_OPERATOR", "BINARY", "HEX", "UINTEGER", 
		"FLOAT", "INTEGER", "STRING", "CHAR", "BYTE", "BOOL", "NULL", "AND", "OR", 
		"XOR", "FUNCTIONDEC", "SCRIPTATTR", "VERSIONSTR", "COMMENT", "MLCOMMENT", 
		"WHITESPACE", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScriptVersionContext scriptVersion() {
			return GetRuleContext<ScriptVersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeStyleContext changeStyle() {
			return GetRuleContext<ChangeStyleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 52;
				scriptVersion();
				}
				break;
			}
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 55;
				changeStyle();
				}
				break;
			}
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2377901702763249668L) != 0)) {
				{
				{
				State = 58;
				line();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeDefaultContext changeDefault() {
			return GetRuleContext<ChangeDefaultContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				statement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				ifBlock();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				whileBlock();
				}
				break;
			case SCRIPTATTR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				changeDefault();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 72;
				assignment();
				}
				break;
			case 2:
				{
				State = 73;
				functionCall();
				}
				break;
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 76;
				Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(T__1);
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 80;
				Match(T__2);
				}
				break;
			}
			State = 83;
			expression(0);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 84;
				Match(T__3);
				}
			}

			State = 87;
			block();
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 88;
				Match(T__4);
				State = 89;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				ifBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(HScriptParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(WHILE);
			State = 97;
			expression(0);
			State = 98;
			block();
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 99;
				Match(T__5);
				State = 100;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(IDENTIFIER);
			State = 104;
			Match(T__6);
			State = 105;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONDEC() { return GetToken(HScriptParser.FUNCTIONDEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(FUNCTIONDEC);
			State = 108;
			Match(IDENTIFIER);
			State = 109;
			Match(T__2);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2310342210794807304L) != 0)) {
				{
				State = 110;
				expression(0);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 111;
					Match(T__7);
					State = 112;
					expression(0);
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 120;
			Match(T__3);
			State = 121;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(IDENTIFIER);
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 124;
				Match(T__2);
				}
				break;
			}
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 127;
				expression(0);
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 128;
						Match(T__7);
						State = 129;
						expression(0);
						}
						} 
					}
					State = 134;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				}
				break;
			}
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 137;
				Match(T__3);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryCatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExceptionInfoContext exceptionInfo() {
			return GetRuleContext<ExceptionInfoContext>(0);
		}
		public TryCatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryCatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryCatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryCatchContext tryCatch() {
		TryCatchContext _localctx = new TryCatchContext(Context, State);
		EnterRule(_localctx, 18, RULE_tryCatch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__8);
			State = 141;
			block();
			State = 142;
			Match(T__9);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 143;
				Match(T__2);
				State = 144;
				exceptionInfo();
				State = 145;
				Match(T__3);
				}
			}

			State = 149;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HScriptParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HScriptParser.IDENTIFIER, i);
		}
		public ExceptionInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionInfoContext exceptionInfo() {
		ExceptionInfoContext _localctx = new ExceptionInfoContext(Context, State);
		EnterRule(_localctx, 20, RULE_exceptionInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(IDENTIFIER);
			State = 152;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParethesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParethesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParethesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterpolatedStringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContext interpolatedString() {
			return GetRuleContext<InterpolatedStringContext>(0);
		}
		public InterpolatedStringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedVariableContext nestedVariable() {
			return GetRuleContext<NestedVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComareOpContext comareOp() {
			return GetRuleContext<ComareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 155;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new InterpolatedStringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 156;
				interpolatedString();
				}
				break;
			case 3:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157;
				nestedVariable();
				}
				break;
			case 4:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 158;
				Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new ParethesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				Match(T__2);
				State = 161;
				expression(0);
				State = 162;
				Match(T__3);
				}
				break;
			case 7:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				unaryOp();
				State = 165;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 169;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 170;
						Match(T__10);
						State = 171;
						expression(0);
						State = 172;
						Match(T__11);
						State = 173;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 175;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 176;
						multOp();
						State = 177;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 180;
						addOp();
						State = 181;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 184;
						comareOp();
						State = 185;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 188;
						boolOp();
						State = 189;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InterpolatedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HScriptParser.STRING, 0); }
		public InterpolatedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringContext interpolatedString() {
		InterpolatedStringContext _localctx = new InterpolatedStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_interpolatedString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(T__12);
			State = 197;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public NestedVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedVariableContext nestedVariable() {
		NestedVariableContext _localctx = new NestedVariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_nestedVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__12);
			State = 200;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 245760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoubleOpContext doubleOp() {
			return GetRuleContext<DoubleOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoubleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleStatementContext doubleStatement() {
		DoubleStatementContext _localctx = new DoubleStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_doubleStatement);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				doubleOp();
				State = 205;
				expression(0);
				}
				break;
			case T__2:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case BINARY:
			case HEX:
			case UINTEGER:
			case FLOAT:
			case INTEGER:
			case STRING:
			case CHAR:
			case BYTE:
			case BOOL:
			case NULL:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				expression(0);
				State = 208;
				doubleOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleOpContext : ParserRuleContext {
		public DoubleOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleOpContext doubleOp() {
		DoubleOpContext _localctx = new DoubleOpContext(Context, State);
		EnterRule(_localctx, 32, RULE_doubleOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 34, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15728640L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComareOpContext : ParserRuleContext {
		public ComareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comareOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComareOpContext comareOp() {
		ComareOpContext _localctx = new ComareOpContext(Context, State);
		EnterRule(_localctx, 38, RULE_comareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4278190080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_OPERATOR() { return GetToken(HScriptParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(Context, State);
		EnterRule(_localctx, 40, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINTEGER() { return GetToken(HScriptParser.UINTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(HScriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(HScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(HScriptParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(HScriptParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(HScriptParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(HScriptParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(HScriptParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(HScriptParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 42, RULE_constant);
		int _la;
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UINTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				Match(UINTEGER);
				State = 223;
				_la = TokenStream.LA(1);
				if ( !(_la==T__31 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 225;
				Match(FLOAT);
				State = 226;
				_la = TokenStream.LA(1);
				if ( !(_la==T__33 || _la==T__34) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 227;
				Match(HEX);
				State = 229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 228;
					_la = TokenStream.LA(1);
					if ( !(_la==T__31 || _la==T__32) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231;
				Match(BINARY);
				State = 233;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 232;
					_la = TokenStream.LA(1);
					if ( !(_la==T__31 || _la==T__32) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case BYTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 235;
				Match(BYTE);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 236;
				Match(STRING);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 237;
				Match(CHAR);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 238;
				Match(BOOL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 239;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSIONSTR() { return GetToken(HScriptParser.VERSIONSTR, 0); }
		public ScriptVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptVersionContext scriptVersion() {
		ScriptVersionContext _localctx = new ScriptVersionContext(Context, State);
		EnterRule(_localctx, 44, RULE_scriptVersion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(SCRIPTATTR);
			State = 243;
			Match(VERSIONSTR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeStyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public ChangeStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeStyle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeStyleContext changeStyle() {
		ChangeStyleContext _localctx = new ChangeStyleContext(Context, State);
		EnterRule(_localctx, 46, RULE_changeStyle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(SCRIPTATTR);
			State = 246;
			Match(T__35);
			State = 247;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCRIPTATTR() { return GetToken(HScriptParser.SCRIPTATTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HScriptParser.IDENTIFIER, 0); }
		public ChangeDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeDefaultContext changeDefault() {
		ChangeDefaultContext _localctx = new ChangeDefaultContext(Context, State);
		EnterRule(_localctx, 48, RULE_changeDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(SCRIPTATTR);
			State = 250;
			Match(T__36);
			State = 251;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHScriptVisitor<TResult> typedVisitor = visitor as IHScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_block);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				Match(T__37);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2377901702763249668L) != 0)) {
					{
					{
					State = 254;
					line();
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260;
				Match(T__38);
				}
				break;
			case T__1:
			case WHILE:
			case SCRIPTATTR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				line();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,61,265,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,3,0,54,8,0,1,0,3,0,57,8,0,
		1,0,5,0,60,8,0,10,0,12,0,63,9,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,71,8,1,1,2,
		1,2,3,2,75,8,2,1,2,3,2,78,8,2,1,3,1,3,3,3,82,8,3,1,3,1,3,3,3,86,8,3,1,
		3,1,3,1,3,3,3,91,8,3,1,4,1,4,3,4,95,8,4,1,5,1,5,1,5,1,5,1,5,3,5,102,8,
		5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,114,8,7,10,7,12,7,117,9,
		7,3,7,119,8,7,1,7,1,7,1,7,1,8,1,8,3,8,126,8,8,1,8,1,8,1,8,5,8,131,8,8,
		10,8,12,8,134,9,8,3,8,136,8,8,1,8,3,8,139,8,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,3,9,148,8,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,168,8,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,5,11,192,8,11,10,11,12,11,195,9,11,1,12,1,12,1,12,1,13,
		1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,211,8,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,3,21,230,8,21,1,21,1,21,3,21,234,8,21,1,21,1,21,1,21,1,21,1,21,
		3,21,241,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
		25,1,25,5,25,256,8,25,10,25,12,25,259,9,25,1,25,1,25,3,25,263,8,25,1,25,
		0,1,22,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,0,7,1,0,14,17,1,0,18,19,1,0,20,23,1,0,14,15,1,0,24,31,1,0,
		32,33,1,0,34,35,283,0,53,1,0,0,0,2,70,1,0,0,0,4,74,1,0,0,0,6,79,1,0,0,
		0,8,94,1,0,0,0,10,96,1,0,0,0,12,103,1,0,0,0,14,107,1,0,0,0,16,123,1,0,
		0,0,18,140,1,0,0,0,20,151,1,0,0,0,22,167,1,0,0,0,24,196,1,0,0,0,26,199,
		1,0,0,0,28,202,1,0,0,0,30,210,1,0,0,0,32,212,1,0,0,0,34,214,1,0,0,0,36,
		216,1,0,0,0,38,218,1,0,0,0,40,220,1,0,0,0,42,240,1,0,0,0,44,242,1,0,0,
		0,46,245,1,0,0,0,48,249,1,0,0,0,50,262,1,0,0,0,52,54,3,44,22,0,53,52,1,
		0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,57,3,46,23,0,56,55,1,0,0,0,56,57,
		1,0,0,0,57,61,1,0,0,0,58,60,3,2,1,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,
		1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,65,5,0,0,1,65,1,1,
		0,0,0,66,71,3,4,2,0,67,71,3,6,3,0,68,71,3,10,5,0,69,71,3,48,24,0,70,66,
		1,0,0,0,70,67,1,0,0,0,70,68,1,0,0,0,70,69,1,0,0,0,71,3,1,0,0,0,72,75,3,
		12,6,0,73,75,3,16,8,0,74,72,1,0,0,0,74,73,1,0,0,0,75,77,1,0,0,0,76,78,
		5,1,0,0,77,76,1,0,0,0,77,78,1,0,0,0,78,5,1,0,0,0,79,81,5,2,0,0,80,82,5,
		3,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,85,3,22,11,0,84,86,
		5,4,0,0,85,84,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,90,3,50,25,0,88,89,
		5,5,0,0,89,91,3,8,4,0,90,88,1,0,0,0,90,91,1,0,0,0,91,7,1,0,0,0,92,95,3,
		50,25,0,93,95,3,6,3,0,94,92,1,0,0,0,94,93,1,0,0,0,95,9,1,0,0,0,96,97,5,
		40,0,0,97,98,3,22,11,0,98,101,3,50,25,0,99,100,5,6,0,0,100,102,3,8,4,0,
		101,99,1,0,0,0,101,102,1,0,0,0,102,11,1,0,0,0,103,104,5,61,0,0,104,105,
		5,7,0,0,105,106,3,22,11,0,106,13,1,0,0,0,107,108,5,55,0,0,108,109,5,61,
		0,0,109,118,5,3,0,0,110,115,3,22,11,0,111,112,5,8,0,0,112,114,3,22,11,
		0,113,111,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,
		119,1,0,0,0,117,115,1,0,0,0,118,110,1,0,0,0,118,119,1,0,0,0,119,120,1,
		0,0,0,120,121,5,4,0,0,121,122,3,50,25,0,122,15,1,0,0,0,123,125,5,61,0,
		0,124,126,5,3,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,135,1,0,0,0,127,
		132,3,22,11,0,128,129,5,8,0,0,129,131,3,22,11,0,130,128,1,0,0,0,131,134,
		1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,
		0,135,127,1,0,0,0,135,136,1,0,0,0,136,138,1,0,0,0,137,139,5,4,0,0,138,
		137,1,0,0,0,138,139,1,0,0,0,139,17,1,0,0,0,140,141,5,9,0,0,141,142,3,50,
		25,0,142,147,5,10,0,0,143,144,5,3,0,0,144,145,3,20,10,0,145,146,5,4,0,
		0,146,148,1,0,0,0,147,143,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,
		150,3,50,25,0,150,19,1,0,0,0,151,152,5,61,0,0,152,153,5,61,0,0,153,21,
		1,0,0,0,154,155,6,11,-1,0,155,168,3,42,21,0,156,168,3,24,12,0,157,168,
		3,26,13,0,158,168,5,61,0,0,159,168,3,16,8,0,160,161,5,3,0,0,161,162,3,
		22,11,0,162,163,5,4,0,0,163,168,1,0,0,0,164,165,3,28,14,0,165,166,3,22,
		11,1,166,168,1,0,0,0,167,154,1,0,0,0,167,156,1,0,0,0,167,157,1,0,0,0,167,
		158,1,0,0,0,167,159,1,0,0,0,167,160,1,0,0,0,167,164,1,0,0,0,168,193,1,
		0,0,0,169,170,10,6,0,0,170,171,5,11,0,0,171,172,3,22,11,0,172,173,5,12,
		0,0,173,174,3,22,11,7,174,192,1,0,0,0,175,176,10,5,0,0,176,177,3,34,17,
		0,177,178,3,22,11,6,178,192,1,0,0,0,179,180,10,4,0,0,180,181,3,36,18,0,
		181,182,3,22,11,5,182,192,1,0,0,0,183,184,10,3,0,0,184,185,3,38,19,0,185,
		186,3,22,11,4,186,192,1,0,0,0,187,188,10,2,0,0,188,189,3,40,20,0,189,190,
		3,22,11,3,190,192,1,0,0,0,191,169,1,0,0,0,191,175,1,0,0,0,191,179,1,0,
		0,0,191,183,1,0,0,0,191,187,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,
		194,1,0,0,0,194,23,1,0,0,0,195,193,1,0,0,0,196,197,5,13,0,0,197,198,5,
		47,0,0,198,25,1,0,0,0,199,200,5,13,0,0,200,201,5,61,0,0,201,27,1,0,0,0,
		202,203,7,0,0,0,203,29,1,0,0,0,204,205,3,32,16,0,205,206,3,22,11,0,206,
		211,1,0,0,0,207,208,3,22,11,0,208,209,3,32,16,0,209,211,1,0,0,0,210,204,
		1,0,0,0,210,207,1,0,0,0,211,31,1,0,0,0,212,213,7,1,0,0,213,33,1,0,0,0,
		214,215,7,2,0,0,215,35,1,0,0,0,216,217,7,3,0,0,217,37,1,0,0,0,218,219,
		7,4,0,0,219,39,1,0,0,0,220,221,5,41,0,0,221,41,1,0,0,0,222,223,5,44,0,
		0,223,241,7,5,0,0,224,241,5,46,0,0,225,226,5,45,0,0,226,241,7,6,0,0,227,
		229,5,43,0,0,228,230,7,5,0,0,229,228,1,0,0,0,229,230,1,0,0,0,230,241,1,
		0,0,0,231,233,5,42,0,0,232,234,7,5,0,0,233,232,1,0,0,0,233,234,1,0,0,0,
		234,241,1,0,0,0,235,241,5,49,0,0,236,241,5,47,0,0,237,241,5,48,0,0,238,
		241,5,50,0,0,239,241,5,51,0,0,240,222,1,0,0,0,240,224,1,0,0,0,240,225,
		1,0,0,0,240,227,1,0,0,0,240,231,1,0,0,0,240,235,1,0,0,0,240,236,1,0,0,
		0,240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,43,1,0,0,0,242,243,
		5,56,0,0,243,244,5,57,0,0,244,45,1,0,0,0,245,246,5,56,0,0,246,247,5,36,
		0,0,247,248,5,61,0,0,248,47,1,0,0,0,249,250,5,56,0,0,250,251,5,37,0,0,
		251,252,5,61,0,0,252,49,1,0,0,0,253,257,5,38,0,0,254,256,3,2,1,0,255,254,
		1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,
		0,259,257,1,0,0,0,260,263,5,39,0,0,261,263,3,2,1,0,262,253,1,0,0,0,262,
		261,1,0,0,0,263,51,1,0,0,0,27,53,56,61,70,74,77,81,85,90,94,101,115,118,
		125,132,135,138,147,167,191,193,210,229,233,240,257,262
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
